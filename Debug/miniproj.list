
miniproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000942c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080095b8  080095b8  000195b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080097c8  080097c8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097c8  080097c8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000618  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001baf5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff0  00000000  00000000  0003bb41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003eb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  000401b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208c6  00000000  00000000  00041738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd35  00000000  00000000  00061ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b25  00000000  00000000  0007ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146858  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064f4  00000000  00000000  001468a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800959c 	.word	0x0800959c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800959c 	.word	0x0800959c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <buzzerInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;

void buzzerInit() {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	buzzerPwmTimer = &htim3;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <buzzerInit+0x24>)
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <buzzerInit+0x28>)
 800093c:	601a      	str	r2, [r3, #0]
	buzzerPwmChannel = TIM_CHANNEL_1;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <buzzerInit+0x2c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <buzzerInit+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <buzzerInit+0x2c>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fa5e 	bl	8005e10 <HAL_TIM_PWM_Start>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000628 	.word	0x20000628
 800095c:	200001e0 	.word	0x200001e0
 8000960:	2000062c 	.word	0x2000062c

08000964 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	4613      	mov	r3, r2
 8000972:	80bb      	strh	r3, [r7, #4]
	if (freq == 0 || freq > 20000) {
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <buzzerChangeTone+0x20>
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000980:	4293      	cmp	r3, r2
 8000982:	d937      	bls.n	80009f4 <buzzerChangeTone+0x90>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8000984:	4b52      	ldr	r3, [pc, #328]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <buzzerChangeTone+0x34>
 800098c:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <buzzerChangeTone+0x170>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	e096      	b.n	8000ac6 <buzzerChangeTone+0x162>
 8000998:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <buzzerChangeTone+0x16c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d105      	bne.n	80009ac <buzzerChangeTone+0x48>
 80009a0:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <buzzerChangeTone+0x170>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	6393      	str	r3, [r2, #56]	; 0x38
 80009aa:	e08c      	b.n	8000ac6 <buzzerChangeTone+0x162>
 80009ac:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <buzzerChangeTone+0x16c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d105      	bne.n	80009c0 <buzzerChangeTone+0x5c>
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <buzzerChangeTone+0x170>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009be:	e082      	b.n	8000ac6 <buzzerChangeTone+0x162>
 80009c0:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <buzzerChangeTone+0x16c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b0c      	cmp	r3, #12
 80009c6:	d105      	bne.n	80009d4 <buzzerChangeTone+0x70>
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <buzzerChangeTone+0x170>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	e078      	b.n	8000ac6 <buzzerChangeTone+0x162>
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <buzzerChangeTone+0x16c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b10      	cmp	r3, #16
 80009da:	d105      	bne.n	80009e8 <buzzerChangeTone+0x84>
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <buzzerChangeTone+0x170>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	6593      	str	r3, [r2, #88]	; 0x58
 80009e6:	e06e      	b.n	8000ac6 <buzzerChangeTone+0x162>
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <buzzerChangeTone+0x170>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009f2:	e068      	b.n	8000ac6 <buzzerChangeTone+0x162>
	} else {
		const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 80009f4:	f004 fdd4 	bl	80055a0 <HAL_RCC_GetSysClockFreq>
 80009f8:	61f8      	str	r0, [r7, #28]
		const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	69fa      	ldr	r2, [r7, #28]
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4a35      	ldr	r2, [pc, #212]	; (8000ad8 <buzzerChangeTone+0x174>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	0b9b      	lsrs	r3, r3, #14
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
		const uint32_t timerClock = internalClockFreq / prescaler;
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
		const uint32_t periodCycles = timerClock / freq;
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	613b      	str	r3, [r7, #16]
		const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <buzzerChangeTone+0x178>)
 8000a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a30:	09db      	lsrs	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

		buzzerPwmTimer->Instance->PSC = prescaler - 1;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
		buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
		buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2201      	movs	r2, #1
 8000a54:	615a      	str	r2, [r3, #20]

		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d105      	bne.n	8000a6a <buzzerChangeTone+0x106>
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000a68:	e02d      	b.n	8000ac6 <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d105      	bne.n	8000a7e <buzzerChangeTone+0x11a>
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a7c:	e023      	b.n	8000ac6 <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b08      	cmp	r3, #8
 8000a84:	d105      	bne.n	8000a92 <buzzerChangeTone+0x12e>
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a90:	e019      	b.n	8000ac6 <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d105      	bne.n	8000aa6 <buzzerChangeTone+0x142>
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aa4:	e00f      	b.n	8000ac6 <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <buzzerChangeTone+0x16c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b10      	cmp	r3, #16
 8000aac:	d105      	bne.n	8000aba <buzzerChangeTone+0x156>
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ab8:	e005      	b.n	8000ac6 <buzzerChangeTone+0x162>
		__HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <buzzerChangeTone+0x170>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ac4:	e7ff      	b.n	8000ac6 <buzzerChangeTone+0x162>
 8000ac6:	bf00      	nop
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000062c 	.word	0x2000062c
 8000ad4:	20000628 	.word	0x20000628
 8000ad8:	45e7b273 	.word	0x45e7b273
 8000adc:	10624dd3 	.word	0x10624dd3

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f001 fb32 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f826 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 fb3c 	bl	8001168 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000af0:	f000 f956 	bl	8000da0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000af4:	f000 f994 	bl	8000e20 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000af8:	f000 fb14 	bl	8001124 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000afc:	f000 f882 	bl	8000c04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b00:	f000 f9cc 	bl	8000e9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b04:	f000 fa18 	bl	8000f38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b08:	f000 fa8e 	bl	8001028 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000b0c:	f000 f8ea 	bl	8000ce4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000b10:	f000 fad8 	bl	80010c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	buzzerInit();
 8000b14:	f7ff ff0e 	bl	8000934 <buzzerInit>
	//  HAL_UART_Transmit(&huart3, p, sizeof(p),100);
	//  unsigned char hello[8] = "hello \n";
	//  HAL_UART_Transmit(&huart3, hello, sizeof(unsigned char) * 8, 1000);
	HAL_TIM_Base_Start_IT(&htim4);
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <main+0x4c>)
 8000b1a:	f005 f8ad 	bl	8005c78 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart3, &pkt, sizeof(pkt));
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4903      	ldr	r1, [pc, #12]	; (8000b30 <main+0x50>)
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <main+0x54>)
 8000b24:	f006 faac 	bl	8007080 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b28:	e7fe      	b.n	8000b28 <main+0x48>
 8000b2a:	bf00      	nop
 8000b2c:	2000022c 	.word	0x2000022c
 8000b30:	2000060a 	.word	0x2000060a
 8000b34:	20000278 	.word	0x20000278

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	; 0x78
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fcd4 	bl	80084f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	223c      	movs	r2, #60	; 0x3c
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f007 fcc6 	bl	80084f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b8c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fb4a 	bl	800422c <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b9e:	f000 ffe9 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fb72 	bl	80052a8 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bca:	f000 ffd3 	bl	8001b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <SystemClock_Config+0xc8>)
 8000bd0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000be0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fd93 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bf4:	f000 ffbe 	bl	8001b74 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3778      	adds	r7, #120	; 0x78
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	000200a4 	.word	0x000200a4

08000c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c82:	f001 fadd 	bl	8002240 <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 ff72 	bl	8001b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000c9c:	f002 fbf8 	bl	8003490 <HAL_ADCEx_MultiModeConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ca6:	f000 ff65 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_ADC1_Init+0xdc>)
 8000cc8:	f002 f8f6 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000cd2:	f000 ff4f 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000003c 	.word	0x2000003c

08000ce4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <MX_ADC2_Init+0xb8>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d54:	f001 fa74 	bl	8002240 <HAL_ADC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d5e:	f000 ff09 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_ADC2_Init+0xb4>)
 8000d80:	f002 f89a 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d8a:	f000 fef3 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000008c 	.word	0x2000008c
 8000d9c:	50000100 	.word	0x50000100

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_I2C1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x7c>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000ddc:	f003 f82e 	bl	8003e3c <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de6:	f000 fec5 	bl	8001b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dee:	f003 f8b4 	bl	8003f5a <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f000 febc 	bl	8001b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000e00:	f003 f8f6 	bl	8003ff0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 feb3 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000dc 	.word	0x200000dc
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	2000090e 	.word	0x2000090e

08000e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_SPI1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e56:	2208      	movs	r2, #8
 8000e58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_SPI1_Init+0x74>)
 8000e80:	f004 fdf8 	bl	8005a74 <HAL_SPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 fe73 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000130 	.word	0x20000130
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ec4:	f240 12df 	movw	r2, #479	; 0x1df
 8000ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ed2:	2263      	movs	r2, #99	; 0x63
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000ee4:	f004 fe71 	bl	8005bca <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eee:	f000 fe41 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000f00:	f005 faba 	bl	8006478 <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f0a:	f000 fe33 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM2_Init+0x98>)
 8000f1c:	f005 ffc4 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f26:	f000 fe25 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000194 	.word	0x20000194

08000f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <MX_TIM3_Init+0xec>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f92:	f004 fe1a 	bl	8005bca <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f9c:	f000 fdea 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000fae:	f005 fa63 	bl	8006478 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000fb8:	f000 fddc 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000fbe:	f004 fec5 	bl	8005d4c <HAL_TIM_PWM_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fc8:	f000 fdd4 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000fdc:	f005 ff64 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fe6:	f000 fdc5 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM3_Init+0xe8>)
 8001002:	f005 f925 	bl	8006250 <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800100c:	f000 fdb2 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM3_Init+0xe8>)
 8001012:	f000 ff41 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3738      	adds	r7, #56	; 0x38
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001e0 	.word	0x200001e0
 8001024:	40000400 	.word	0x40000400

08001028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM4_Init+0x94>)
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <MX_TIM4_Init+0x98>)
 800104a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48 -1;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM4_Init+0x94>)
 800104e:	222f      	movs	r2, #47	; 0x2f
 8001050:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_TIM4_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 -1;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_TIM4_Init+0x94>)
 800105a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_TIM4_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_TIM4_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <MX_TIM4_Init+0x94>)
 800106e:	f004 fdac 	bl	8005bca <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001078:	f000 fd7c 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_TIM4_Init+0x94>)
 800108a:	f005 f9f5 	bl	8006478 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 fd6e 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_TIM4_Init+0x94>)
 80010a6:	f005 feff 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010b0:	f000 fd60 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000022c 	.word	0x2000022c
 80010c0:	40000800 	.word	0x40000800

080010c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <MX_USART3_UART_Init+0x5c>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART3_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART3_UART_Init+0x58>)
 8001108:	f005 ff6c 	bl	8006fe4 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001112:	f000 fd2f 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000278 	.word	0x20000278
 8001120:	40004800 	.word	0x40004800

08001124 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <MX_USB_PCD_Init+0x40>)
 800112c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 8001130:	2208      	movs	r2, #8
 8001132:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 8001136:	2202      	movs	r2, #2
 8001138:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 800113c:	2202      	movs	r2, #2
 800113e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_USB_PCD_Init+0x3c>)
 800114e:	f002 ff9b 	bl	8004088 <HAL_PCD_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001158:	f000 fd0c 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000300 	.word	0x20000300
 8001164:	40005c00 	.word	0x40005c00

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <MX_GPIO_Init+0x15c>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <MX_GPIO_Init+0x15c>)
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b4e      	ldr	r3, [pc, #312]	; (80012c4 <MX_GPIO_Init+0x15c>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <MX_GPIO_Init+0x15c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <MX_GPIO_Init+0x15c>)
 800119c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a38      	ldr	r2, [pc, #224]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <MX_GPIO_Init+0x15c>)
 80011fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <MX_GPIO_Init+0x15c>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <MX_GPIO_Init+0x160>)
 8001216:	f002 fdf9 	bl	8003e0c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001220:	482a      	ldr	r0, [pc, #168]	; (80012cc <MX_GPIO_Init+0x164>)
 8001222:	f002 fdf3 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	211e      	movs	r1, #30
 800122a:	4829      	ldr	r0, [pc, #164]	; (80012d0 <MX_GPIO_Init+0x168>)
 800122c:	f002 fdee 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001230:	2337      	movs	r3, #55	; 0x37
 8001232:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001234:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <MX_GPIO_Init+0x160>)
 8001246:	f002 fc67 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800124a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800124e:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4819      	ldr	r0, [pc, #100]	; (80012c8 <MX_GPIO_Init+0x160>)
 8001264:	f002 fc58 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f002 fc4b 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001282:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_GPIO_Init+0x164>)
 800129c:	f002 fc3c 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80012a0:	231e      	movs	r3, #30
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_GPIO_Init+0x168>)
 80012b8:	f002 fc2e 	bl	8003b18 <HAL_GPIO_Init>

}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48001000 	.word	0x48001000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000c00 	.word	0x48000c00

080012d4 <numToBcd>:

/* USER CODE BEGIN 4 */
void numToBcd(int i) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if (i > 10) i = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b0a      	cmp	r3, #10
 80012e0:	dd01      	ble.n	80012e6 <numToBcd+0x12>
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
	int x1 = i & 1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
	int x2 = i & 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
	int x3 = i & 4;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60fb      	str	r3, [r7, #12]
	int x4 = i & 8;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	60bb      	str	r3, [r7, #8]
	if (x1 > 0)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd01      	ble.n	8001310 <numToBcd+0x3c>
		x1 = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
	if (x2 > 0)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	dd01      	ble.n	800131a <numToBcd+0x46>
		x2 = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
	if (x3 > 0)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd01      	ble.n	8001324 <numToBcd+0x50>
		x3 = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
	if (x4 > 0)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dd01      	ble.n	800132e <numToBcd+0x5a>
		x4 = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, x2); //B
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2102      	movs	r1, #2
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <numToBcd+0x9c>)
 8001338:	f002 fd68 	bl	8003e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, x3); //C
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	2104      	movs	r1, #4
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <numToBcd+0x9c>)
 8001346:	f002 fd61 	bl	8003e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, x4); //D
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	2108      	movs	r1, #8
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <numToBcd+0x9c>)
 8001354:	f002 fd5a 	bl	8003e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, x1); //A
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	2110      	movs	r1, #16
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <numToBcd+0x9c>)
 8001362:	f002 fd53 	bl	8003e0c <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	48000c00 	.word	0x48000c00
 8001374:	00000000 	.word	0x00000000

08001378 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4aa0      	ldr	r2, [pc, #640]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001386:	4293      	cmp	r3, r2
 8001388:	f040 81b8 	bne.w	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
		count++;
 800138c:	4b9f      	ldr	r3, [pc, #636]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a9e      	ldr	r2, [pc, #632]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001394:	6013      	str	r3, [r2, #0]
		if (count > 1000) {
 8001396:	4b9d      	ldr	r3, [pc, #628]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139e:	dd34      	ble.n	800140a <HAL_TIM_PeriodElapsedCallback+0x92>
			HAL_ADC_Start_IT(&hadc1);
 80013a0:	489b      	ldr	r0, [pc, #620]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80013a2:	f001 f92d 	bl	8002600 <HAL_ADC_Start_IT>
			HAL_ADC_Start_IT(&hadc2);
 80013a6:	489b      	ldr	r0, [pc, #620]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013a8:	f001 f92a 	bl	8002600 <HAL_ADC_Start_IT>
			count = 0;
 80013ac:	4b97      	ldr	r3, [pc, #604]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
			pktlds[0] = 0XAA; //preamable
 80013b2:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013b4:	22aa      	movs	r2, #170	; 0xaa
 80013b6:	701a      	strb	r2, [r3, #0]
			pktlds[1] = 0X01; //src
 80013b8:	4b97      	ldr	r3, [pc, #604]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
			pktlds[2] = 0X02; //dst
 80013be:	4b96      	ldr	r3, [pc, #600]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	709a      	strb	r2, [r3, #2]
			pktlds[3] = 0X02;
 80013c4:	4b94      	ldr	r3, [pc, #592]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	70da      	strb	r2, [r3, #3]
			pktlds[4] = 0X21;
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013cc:	2221      	movs	r2, #33	; 0x21
 80013ce:	711a      	strb	r2, [r3, #4]
			pktlds[5] = ld;
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b90      	ldr	r3, [pc, #576]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013d6:	715a      	strb	r2, [r3, #5]
			pktlds[6] = 0X00;
 80013d8:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	719a      	strb	r2, [r3, #6]

			pktlms[0] = 0XAA; //preamable
 80013de:	4b90      	ldr	r3, [pc, #576]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013e0:	22aa      	movs	r2, #170	; 0xaa
 80013e2:	701a      	strb	r2, [r3, #0]
			pktlms[1] = 0X01; //src
 80013e4:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	705a      	strb	r2, [r3, #1]
			pktlms[2] = 0X02; //dst
 80013ea:	4b8d      	ldr	r3, [pc, #564]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	709a      	strb	r2, [r3, #2]
			pktlms[3] = 0X02;
 80013f0:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013f2:	2202      	movs	r2, #2
 80013f4:	70da      	strb	r2, [r3, #3]
			pktlms[4] = 0X22;
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013f8:	2222      	movs	r2, #34	; 0x22
 80013fa:	711a      	strb	r2, [r3, #4]
			pktlms[5] = lm;
 80013fc:	4b89      	ldr	r3, [pc, #548]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b87      	ldr	r3, [pc, #540]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001402:	715a      	strb	r2, [r3, #5]
			pktlms[6] = 0X00;
 8001404:	4b86      	ldr	r3, [pc, #536]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001406:	2200      	movs	r2, #0
 8001408:	719a      	strb	r2, [r3, #6]
//			HAL_UART_Transmit(&huart3, pktlds, sizeof(pktlds), 100);
//			HAL_UART_Transmit(&huart3, pktlms, sizeof(pktlms), 100);
		}

		switch (cnt) {
 800140a:	4b87      	ldr	r3, [pc, #540]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b03      	cmp	r3, #3
 8001410:	f200 8098 	bhi.w	8001544 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800146f 	.word	0x0800146f
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014fd 	.word	0x080014fd
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_15, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8001432:	487e      	ldr	r0, [pc, #504]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001434:	f002 fcea 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	487b      	ldr	r0, [pc, #492]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001440:	f002 fce4 	bl	8003e0c <HAL_GPIO_WritePin>
			numToBcd(ld % 10);
 8001444:	4b75      	ldr	r3, [pc, #468]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800144a:	fba3 1302 	umull	r1, r3, r3, r2
 800144e:	08d9      	lsrs	r1, r3, #3
 8001450:	460b      	mov	r3, r1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff39 	bl	80012d4 <numToBcd>
			//					    numToBcd(6);
			cnt++;
 8001462:	4b71      	ldr	r3, [pc, #452]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800146a:	6013      	str	r3, [r2, #0]
			break;
 800146c:	e06a      	b.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001474:	486d      	ldr	r0, [pc, #436]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001476:	f002 fcc9 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001480:	486a      	ldr	r0, [pc, #424]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001482:	f002 fcc3 	bl	8003e0c <HAL_GPIO_WritePin>
			numToBcd((ld / 10) % 10);
 8001486:	4b65      	ldr	r3, [pc, #404]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4a69      	ldr	r2, [pc, #420]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001496:	fba3 1302 	umull	r1, r3, r3, r2
 800149a:	08d9      	lsrs	r1, r3, #3
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff13 	bl	80012d4 <numToBcd>
			//						numToBcd(8);
			cnt++;
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a5c      	ldr	r2, [pc, #368]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014b6:	6013      	str	r3, [r2, #0]

			break;
 80014b8:	e044      	b.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 | GPIO_PIN_13 | GPIO_PIN_12, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80014c0:	485a      	ldr	r0, [pc, #360]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80014c2:	f002 fca3 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014cc:	4857      	ldr	r0, [pc, #348]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80014ce:	f002 fc9d 	bl	8003e0c <HAL_GPIO_WritePin>
			numToBcd(lm % 10);
 80014d2:	4b54      	ldr	r3, [pc, #336]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80014d8:	fba3 1302 	umull	r1, r3, r3, r2
 80014dc:	08d9      	lsrs	r1, r3, #3
 80014de:	460b      	mov	r3, r1
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fef2 	bl	80012d4 <numToBcd>
			//						numToBcd(8);
			cnt++;
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80014f8:	6013      	str	r3, [r2, #0]
			break;
 80014fa:	e023      	b.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_12, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001502:	484a      	ldr	r0, [pc, #296]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001504:	f002 fc82 	bl	8003e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150e:	4847      	ldr	r0, [pc, #284]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001510:	f002 fc7c 	bl	8003e0c <HAL_GPIO_WritePin>
			numToBcd((lm / 10) % 10);
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001524:	fba3 1302 	umull	r1, r3, r3, r2
 8001528:	08d9      	lsrs	r1, r3, #3
 800152a:	460b      	mov	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fecc 	bl	80012d4 <numToBcd>
			//						numToBcd(8);
			cnt = 0;
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			break;
 8001542:	bf00      	nop
		}
		if (ld < ldthre || lm > lmthre) {
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d306      	bcc.n	800155e <HAL_TIM_PeriodElapsedCallback+0x1e6>
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	f240 80cf 	bls.w	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
			if (flag == 0X31) {
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b31      	cmp	r3, #49	; 0x31
 8001564:	f040 80ca 	bne.w	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
				peak++;
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001570:	6013      	str	r3, [r2, #0]
				if (peak == 100) {
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d12b      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x25a>
					if (state == 1)
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d104      	bne.n	800158c <HAL_TIM_PeriodElapsedCallback+0x214>
						state = -1;
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e007      	b.n	800159c <HAL_TIM_PeriodElapsedCallback+0x224>
					else if (state == -1)
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d102      	bne.n	800159c <HAL_TIM_PeriodElapsedCallback+0x224>
						state = 1;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
					peak = 0;
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
					if (state == 1) {
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d106      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x240>
						buzzerChangeTone(freqh, 20);
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	2114      	movs	r1, #20
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f9d7 	bl	8000964 <buzzerChangeTone>
					}
				}
			}
		}
	}
}
 80015b6:	e0a1      	b.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
					} else if (state == -1) {
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	f040 809c 	bne.w	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
						buzzerChangeTone(freql, 20);
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	2114      	movs	r1, #20
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9ca 	bl	8000964 <buzzerChangeTone>
}
 80015d0:	e094      	b.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
				} else if (flag == 0X32) {
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b32      	cmp	r3, #50	; 0x32
 80015d8:	d13c      	bne.n	8001654 <HAL_TIM_PeriodElapsedCallback+0x2dc>
					freq += 70;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	3346      	adds	r3, #70	; 0x46
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015e4:	801a      	strh	r2, [r3, #0]
					if (freq >= freqh) {
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d303      	bcc.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x282>
						freq = freql;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015f8:	801a      	strh	r2, [r3, #0]
					buzzerChangeTone(freq, 20);
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2114      	movs	r1, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff f9af 	bl	8000964 <buzzerChangeTone>
}
 8001606:	e079      	b.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
 8001608:	40000800 	.word	0x40000800
 800160c:	20000610 	.word	0x20000610
 8001610:	2000003c 	.word	0x2000003c
 8001614:	2000008c 	.word	0x2000008c
 8001618:	200005f0 	.word	0x200005f0
 800161c:	20000000 	.word	0x20000000
 8001620:	200005f8 	.word	0x200005f8
 8001624:	20000001 	.word	0x20000001
 8001628:	20000614 	.word	0x20000614
 800162c:	48000400 	.word	0x48000400
 8001630:	cccccccd 	.word	0xcccccccd
 8001634:	200005ec 	.word	0x200005ec
 8001638:	200005ed 	.word	0x200005ed
 800163c:	2000060b 	.word	0x2000060b
 8001640:	20000618 	.word	0x20000618
 8001644:	20000004 	.word	0x20000004
 8001648:	2000000c 	.word	0x2000000c
 800164c:	2000000a 	.word	0x2000000a
 8001650:	20000008 	.word	0x20000008
				} else if (flag == 0X33) {
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b33      	cmp	r3, #51	; 0x33
 800165a:	d14f      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
					time += 100;
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800165e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001668:	f7fe fede 	bl	8000428 <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	492a      	ldr	r1, [pc, #168]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001672:	e9c1 2300 	strd	r2, r3, [r1]
					freq = 190 * sin(2 * M_PI / 3800 * time) + 210;
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167c:	a322      	add	r3, pc, #136	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fda1 	bl	80001c8 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	ec43 2b17 	vmov	d7, r2, r3
 800168e:	eeb0 0a47 	vmov.f32	s0, s14
 8001692:	eef0 0a67 	vmov.f32	s1, s15
 8001696:	f006 ff37 	bl	8008508 <sin>
 800169a:	ec51 0b10 	vmov	r0, r1, d0
 800169e:	a31c      	add	r3, pc, #112	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe fd90 	bl	80001c8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016b6:	f7fe feb7 	bl	8000428 <__adddf3>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f917 	bl	80008f4 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80016cc:	801a      	strh	r2, [r3, #0]
					buzzerChangeTone(freq, 20);
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2114      	movs	r1, #20
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f945 	bl	8000964 <buzzerChangeTone>
					if (freq >= freqh) {
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d30a      	bcc.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x384>
						freq = freql;
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80016ec:	801a      	strh	r2, [r3, #0]
						time = 0;
 80016ee:	490b      	ldr	r1, [pc, #44]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	b2adbb1e 	.word	0xb2adbb1e
 800170c:	3f5b1727 	.word	0x3f5b1727
 8001710:	00000000 	.word	0x00000000
 8001714:	4067c000 	.word	0x4067c000
 8001718:	2000060b 	.word	0x2000060b
 800171c:	20000620 	.word	0x20000620
 8001720:	40590000 	.word	0x40590000
 8001724:	406a4000 	.word	0x406a4000
 8001728:	20000008 	.word	0x20000008
 800172c:	2000000c 	.word	0x2000000c
 8001730:	2000000a 	.word	0x2000000a

08001734 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001744:	d114      	bne.n	8001770 <HAL_ADC_ConvCpltCallback+0x3c>
		//    	LDR
		int x = HAL_ADC_GetValue(&hadc1);
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8001748:	f001 f89a 	bl	8002880 <HAL_ADC_GetValue>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
		ld = (x * 99 / 4095);
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	4413      	add	r3, r2
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_ADC_ConvCpltCallback+0x78>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	441a      	add	r2, r3
 8001764:	12d2      	asrs	r2, r2, #11
 8001766:	17db      	asrs	r3, r3, #31
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800176e:	701a      	strb	r2, [r3, #0]
	}
	if (hadc->Instance == ADC2) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x80>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d112      	bne.n	80017a0 <HAL_ADC_ConvCpltCallback+0x6c>
		//    	LM35
		int l = HAL_ADC_GetValue(&hadc2);
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <HAL_ADC_ConvCpltCallback+0x84>)
 800177c:	f001 f880 	bl	8002880 <HAL_ADC_GetValue>
 8001780:	4603      	mov	r3, r0
 8001782:	60bb      	str	r3, [r7, #8]
		lm = (l * 3300 / 40950);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f640 42e4 	movw	r2, #3300	; 0xce4
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_ADC_ConvCpltCallback+0x88>)
 8001790:	fb82 1203 	smull	r1, r2, r2, r3
 8001794:	1312      	asrs	r2, r2, #12
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_ADC_ConvCpltCallback+0x8c>)
 800179e:	701a      	strb	r2, [r3, #0]
	}
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000003c 	.word	0x2000003c
 80017ac:	80080081 	.word	0x80080081
 80017b0:	20000000 	.word	0x20000000
 80017b4:	50000100 	.word	0x50000100
 80017b8:	2000008c 	.word	0x2000008c
 80017bc:	199b334d 	.word	0x199b334d
 80017c0:	20000001 	.word	0x20000001

080017c4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a8a      	ldr	r2, [pc, #552]	; (80019fc <HAL_UART_RxCpltCallback+0x238>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	f040 81be 	bne.w	8001b54 <HAL_UART_RxCpltCallback+0x390>
		if (pkt == 0XAA) {
 80017d8:	4b89      	ldr	r3, [pc, #548]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2baa      	cmp	r3, #170	; 0xaa
 80017de:	d11c      	bne.n	800181a <HAL_UART_RxCpltCallback+0x56>
			i = 0;
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 10; i++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e007      	b.n	80017fc <HAL_UART_RxCpltCallback+0x38>
				pktbuffer[i] = 0; // set each element to 0
 80017ec:	4a86      	ldr	r2, [pc, #536]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 10; i++) {
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b09      	cmp	r3, #9
 8001800:	ddf4      	ble.n	80017ec <HAL_UART_RxCpltCallback+0x28>
			}
			pktbuffer[i] = pkt;
 8001802:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001808:	7811      	ldrb	r1, [r2, #0]
 800180a:	4a7f      	ldr	r2, [pc, #508]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 800180c:	54d1      	strb	r1, [r2, r3]
			i++;
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e197      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
		} else {
			if (pkt == 0X01 && i == 1) {
 800181a:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10f      	bne.n	8001842 <HAL_UART_RxCpltCallback+0x7e>
 8001822:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10b      	bne.n	8001842 <HAL_UART_RxCpltCallback+0x7e>
				pktbuffer[i] = pkt;
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a74      	ldr	r2, [pc, #464]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001830:	7811      	ldrb	r1, [r2, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001834:	54d1      	strb	r1, [r2, r3]
				i++;
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a71      	ldr	r2, [pc, #452]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e183      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X02 && i == 2) {
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d10f      	bne.n	800186a <HAL_UART_RxCpltCallback+0xa6>
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d10b      	bne.n	800186a <HAL_UART_RxCpltCallback+0xa6>
				pktbuffer[i] = pkt;
 8001852:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6a      	ldr	r2, [pc, #424]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001858:	7811      	ldrb	r1, [r2, #0]
 800185a:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 800185c:	54d1      	strb	r1, [r2, r3]
				i++;
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e16f      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X04 && i == 3) {
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b04      	cmp	r3, #4
 8001870:	d10f      	bne.n	8001892 <HAL_UART_RxCpltCallback+0xce>
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d10b      	bne.n	8001892 <HAL_UART_RxCpltCallback+0xce>
				pktbuffer[i] = pkt;
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	4a61      	ldr	r2, [pc, #388]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001884:	54d1      	strb	r1, [r2, r3]
				i++;
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e15b      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X11 && i == 4 && pktbuffer[3] == 0X04) {
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b11      	cmp	r3, #17
 8001898:	d113      	bne.n	80018c2 <HAL_UART_RxCpltCallback+0xfe>
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d10f      	bne.n	80018c2 <HAL_UART_RxCpltCallback+0xfe>
 80018a2:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d10b      	bne.n	80018c2 <HAL_UART_RxCpltCallback+0xfe>
				pktbuffer[i] = pkt;
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a54      	ldr	r2, [pc, #336]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80018b0:	7811      	ldrb	r1, [r2, #0]
 80018b2:	4a55      	ldr	r2, [pc, #340]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80018b4:	54d1      	strb	r1, [r2, r3]
				i++;
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e143      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X31 && i == 5 && pktbuffer[4] == 0X11) {
 80018c2:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b31      	cmp	r3, #49	; 0x31
 80018c8:	d11d      	bne.n	8001906 <HAL_UART_RxCpltCallback+0x142>
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d119      	bne.n	8001906 <HAL_UART_RxCpltCallback+0x142>
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	2b11      	cmp	r3, #17
 80018d8:	d115      	bne.n	8001906 <HAL_UART_RxCpltCallback+0x142>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e0:	484a      	ldr	r0, [pc, #296]	; (8001a0c <HAL_UART_RxCpltCallback+0x248>)
 80018e2:	f002 fa93 	bl	8003e0c <HAL_GPIO_WritePin>
				pktbuffer[i] = pkt;
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80018ec:	7811      	ldrb	r1, [r2, #0]
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80018f0:	54d1      	strb	r1, [r2, r3]
				flag = pkt;
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_UART_RxCpltCallback+0x24c>)
 80018f8:	701a      	strb	r2, [r3, #0]
				i++;
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e121      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X32 && i == 5 && pktbuffer[4] == 0X11) {
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b32      	cmp	r3, #50	; 0x32
 800190c:	d11d      	bne.n	800194a <HAL_UART_RxCpltCallback+0x186>
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d119      	bne.n	800194a <HAL_UART_RxCpltCallback+0x186>
 8001916:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001918:	791b      	ldrb	r3, [r3, #4]
 800191a:	2b11      	cmp	r3, #17
 800191c:	d115      	bne.n	800194a <HAL_UART_RxCpltCallback+0x186>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001924:	4839      	ldr	r0, [pc, #228]	; (8001a0c <HAL_UART_RxCpltCallback+0x248>)
 8001926:	f002 fa71 	bl	8003e0c <HAL_GPIO_WritePin>
				pktbuffer[i] = pkt;
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001930:	7811      	ldrb	r1, [r2, #0]
 8001932:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001934:	54d1      	strb	r1, [r2, r3]
				flag = pkt;
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_UART_RxCpltCallback+0x24c>)
 800193c:	701a      	strb	r2, [r3, #0]
				i++;
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e0ff      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X33 && i == 5 && pktbuffer[4] == 0X11) {
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b33      	cmp	r3, #51	; 0x33
 8001950:	d11d      	bne.n	800198e <HAL_UART_RxCpltCallback+0x1ca>
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d119      	bne.n	800198e <HAL_UART_RxCpltCallback+0x1ca>
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	2b11      	cmp	r3, #17
 8001960:	d115      	bne.n	800198e <HAL_UART_RxCpltCallback+0x1ca>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001968:	4828      	ldr	r0, [pc, #160]	; (8001a0c <HAL_UART_RxCpltCallback+0x248>)
 800196a:	f002 fa4f 	bl	8003e0c <HAL_GPIO_WritePin>
				pktbuffer[i] = pkt;
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 8001974:	7811      	ldrb	r1, [r2, #0]
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001978:	54d1      	strb	r1, [r2, r3]
				flag = pkt;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_UART_RxCpltCallback+0x24c>)
 8001980:	701a      	strb	r2, [r3, #0]
				i++;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e0dd      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (i == 6 && (pktbuffer[5] == 0X31 || pktbuffer[5] == 0X32	|| pktbuffer[5] == 0X33)) { //low
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b06      	cmp	r3, #6
 8001994:	d11c      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x20c>
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 8001998:	795b      	ldrb	r3, [r3, #5]
 800199a:	2b31      	cmp	r3, #49	; 0x31
 800199c:	d007      	beq.n	80019ae <HAL_UART_RxCpltCallback+0x1ea>
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	2b32      	cmp	r3, #50	; 0x32
 80019a4:	d003      	beq.n	80019ae <HAL_UART_RxCpltCallback+0x1ea>
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80019a8:	795b      	ldrb	r3, [r3, #5]
 80019aa:	2b33      	cmp	r3, #51	; 0x33
 80019ac:	d110      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x20c>
				pktbuffer[i] = pkt;
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80019b4:	7811      	ldrb	r1, [r2, #0]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80019b8:	54d1      	strb	r1, [r2, r3]
				freql = pkt;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_UART_RxCpltCallback+0x250>)
 80019c2:	801a      	strh	r2, [r3, #0]
				i++;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e0bc      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (i == 7) { //high
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	d121      	bne.n	8001a1c <HAL_UART_RxCpltCallback+0x258>
				pktbuffer[i] = pkt;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80019de:	7811      	ldrb	r1, [r2, #0]
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_UART_RxCpltCallback+0x244>)
 80019e2:	54d1      	strb	r1, [r2, r3]
				freqh = pkt;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_UART_RxCpltCallback+0x23c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_UART_RxCpltCallback+0x254>)
 80019ec:	801a      	strh	r2, [r3, #0]
				i++;
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_UART_RxCpltCallback+0x240>)
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e0a7      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
 80019fa:	bf00      	nop
 80019fc:	40004800 	.word	0x40004800
 8001a00:	2000060a 	.word	0x2000060a
 8001a04:	2000060c 	.word	0x2000060c
 8001a08:	20000600 	.word	0x20000600
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	2000060b 	.word	0x2000060b
 8001a14:	2000000a 	.word	0x2000000a
 8001a18:	2000000c 	.word	0x2000000c
			}
			else if (pkt == 0X00 && i == 8) { //crc
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10d      	bne.n	8001a40 <HAL_UART_RxCpltCallback+0x27c>
 8001a24:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d109      	bne.n	8001a40 <HAL_UART_RxCpltCallback+0x27c>
				pktbuffer[i] = pkt;
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a32:	7811      	ldrb	r1, [r2, #0]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001a36:	54d1      	strb	r1, [r2, r3]
				i = 0;
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e084      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X02 && i == 3) {
 8001a40:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10f      	bne.n	8001a68 <HAL_UART_RxCpltCallback+0x2a4>
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d10b      	bne.n	8001a68 <HAL_UART_RxCpltCallback+0x2a4>
				pktbuffer[i] = pkt;
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a41      	ldr	r2, [pc, #260]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a56:	7811      	ldrb	r1, [r2, #0]
 8001a58:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001a5a:	54d1      	strb	r1, [r2, r3]
				i++;
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e070      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X41 && i == 4 && pktbuffer[3] == 0X02) { //control lm
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b41      	cmp	r3, #65	; 0x41
 8001a6e:	d113      	bne.n	8001a98 <HAL_UART_RxCpltCallback+0x2d4>
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d10f      	bne.n	8001a98 <HAL_UART_RxCpltCallback+0x2d4>
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001a7a:	78db      	ldrb	r3, [r3, #3]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10b      	bne.n	8001a98 <HAL_UART_RxCpltCallback+0x2d4>
				pktbuffer[i] = pkt;
 8001a80:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001a86:	7811      	ldrb	r1, [r2, #0]
 8001a88:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001a8a:	54d1      	strb	r1, [r2, r3]
				i++;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e058      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (i == 5 && pktbuffer[4] == 0X41) { //thre lm
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d113      	bne.n	8001ac8 <HAL_UART_RxCpltCallback+0x304>
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	2b41      	cmp	r3, #65	; 0x41
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_UART_RxCpltCallback+0x304>
				lmthre = pkt;
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_UART_RxCpltCallback+0x3a4>)
 8001aae:	701a      	strb	r2, [r3, #0]
				pktbuffer[i] = pkt;
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001ab6:	7811      	ldrb	r1, [r2, #0]
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001aba:	54d1      	strb	r1, [r2, r3]
				i++;
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e040      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X42 && i == 4 && pktbuffer[3] == 0X02) { //control ld
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b42      	cmp	r3, #66	; 0x42
 8001ace:	d113      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0x334>
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d10f      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0x334>
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001ada:	78db      	ldrb	r3, [r3, #3]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d10b      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0x334>
				pktbuffer[i] = pkt;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001ae6:	7811      	ldrb	r1, [r2, #0]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001aea:	54d1      	strb	r1, [r2, r3]
				i++;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e028      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (i == 5 && pktbuffer[4] == 0X42) { //thre ld
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d113      	bne.n	8001b28 <HAL_UART_RxCpltCallback+0x364>
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001b02:	791b      	ldrb	r3, [r3, #4]
 8001b04:	2b42      	cmp	r3, #66	; 0x42
 8001b06:	d10f      	bne.n	8001b28 <HAL_UART_RxCpltCallback+0x364>
				ldthre = pkt;
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_UART_RxCpltCallback+0x3a8>)
 8001b0e:	701a      	strb	r2, [r3, #0]
				pktbuffer[i] = pkt;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001b16:	7811      	ldrb	r1, [r2, #0]
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001b1a:	54d1      	strb	r1, [r2, r3]
				i++;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e010      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
			}
			else if (pkt == 0X00 && i == 6) { //crc
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10c      	bne.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b06      	cmp	r3, #6
 8001b36:	d108      	bne.n	8001b4a <HAL_UART_RxCpltCallback+0x386>
				pktbuffer[i] = pkt;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001b3e:	7811      	ldrb	r1, [r2, #0]
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_UART_RxCpltCallback+0x3a0>)
 8001b42:	54d1      	strb	r1, [r2, r3]
				i = 0;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_UART_RxCpltCallback+0x39c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &pkt, sizeof(pkt));
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_UART_RxCpltCallback+0x398>)
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <HAL_UART_RxCpltCallback+0x3ac>)
 8001b50:	f005 fa96 	bl	8007080 <HAL_UART_Receive_IT>
	}
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000060a 	.word	0x2000060a
 8001b60:	2000060c 	.word	0x2000060c
 8001b64:	20000600 	.word	0x20000600
 8001b68:	200005ed 	.word	0x200005ed
 8001b6c:	200005ec 	.word	0x200005ec
 8001b70:	20000278 	.word	0x20000278

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x44>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f001 fef6 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d136      	bne.n	8001c58 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001bf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6153      	str	r3, [r2, #20]
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1e:	6153      	str	r3, [r2, #20]
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f001 ff69 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 8001c46:	2201      	movs	r2, #1
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2012      	movs	r0, #18
 8001c4c:	f001 feb7 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c50:	2012      	movs	r0, #18
 8001c52:	f001 fed0 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c56:	e03a      	b.n	8001cce <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <HAL_ADC_MspInit+0x118>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d135      	bne.n	8001cce <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001c6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_ADC_MspInit+0x110>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6153      	str	r3, [r2, #20]
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	6153      	str	r3, [r2, #20]
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_ADC_MspInit+0x114>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f001 ff2d 	bl	8003b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2012      	movs	r0, #18
 8001cc4:	f001 fe7b 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cc8:	2012      	movs	r0, #18
 8001cca:	f001 fe94 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3730      	adds	r7, #48	; 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000630 	.word	0x20000630
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	50000100 	.word	0x50000100

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_I2C_MspInit+0x7c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d127      	bne.n	8001d56 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	6153      	str	r3, [r2, #20]
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <HAL_I2C_MspInit+0x84>)
 8001d3a:	f001 feed 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_I2C_MspInit+0x80>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000400 	.word	0x48000400

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x7c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d128      	bne.n	8001de0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001dbe:	23e0      	movs	r3, #224	; 0xe0
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f001 fe9c 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d114      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f001 fdcd 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f001 fde6 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e2a:	e02a      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_TIM_Base_MspInit+0xa0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10c      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
}
 8001e4e:	e018      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_TIM_Base_MspInit+0xa4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_TIM_Base_MspInit+0x9c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	201e      	movs	r0, #30
 8001e78:	f001 fda1 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e7c:	201e      	movs	r0, #30
 8001e7e:	f001 fdba 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_TIM_MspPostInit+0x64>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_TIM_MspPostInit+0x68>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_TIM_MspPostInit+0x68>)
 8001ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ec4:	6153      	str	r3, [r2, #20]
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_MspPostInit+0x68>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_TIM_MspPostInit+0x6c>)
 8001eee:	f001 fe13 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000800 	.word	0x48000800

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d130      	bne.n	8001f8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6153      	str	r3, [r2, #20]
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <HAL_UART_MspInit+0x94>)
 8001f78:	f001 fdce 	bl	8003b18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2027      	movs	r0, #39	; 0x27
 8001f82:	f001 fd1c 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f86:	2027      	movs	r0, #39	; 0x27
 8001f88:	f001 fd35 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_PCD_MspInit+0x80>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d129      	bne.n	8002016 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_PCD_MspInit+0x84>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_PCD_MspInit+0x84>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_PCD_MspInit+0x84>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001fec:	230e      	movs	r3, #14
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f001 fd8d 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_PCD_MspInit+0x84>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_PCD_MspInit+0x84>)
 8002004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_PCD_MspInit+0x84>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40005c00 	.word	0x40005c00
 8002024:	40021000 	.word	0x40021000

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 f8b0 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <ADC1_2_IRQHandler+0x14>)
 8002082:	f000 fc0b 	bl	800289c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <ADC1_2_IRQHandler+0x18>)
 8002088:	f000 fc08 	bl	800289c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000003c 	.word	0x2000003c
 8002094:	2000008c 	.word	0x2000008c

08002098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM2_IRQHandler+0x10>)
 800209e:	f003 ffb7 	bl	8006010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000194 	.word	0x20000194

080020ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM4_IRQHandler+0x10>)
 80020b2:	f003 ffad 	bl	8006010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000022c 	.word	0x2000022c

080020c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <USART3_IRQHandler+0x10>)
 80020c6:	f005 f81f 	bl	8007108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000278 	.word	0x20000278

080020d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002130 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020fc:	f7ff ffea 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <LoopForever+0x6>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	; (8002138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <LoopForever+0xe>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	; (8002144 <LoopForever+0x16>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002126:	f006 f9c1 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800212a:	f7fe fcd9 	bl	8000ae0 <main>

0800212e <LoopForever>:

LoopForever:
    b LoopForever
 800212e:	e7fe      	b.n	800212e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002130:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800213c:	080097d0 	.word	0x080097d0
  ldr r2, =_sbss
 8002140:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002144:	20000638 	.word	0x20000638

08002148 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC3_IRQHandler>
	...

0800214c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_Init+0x28>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_Init+0x28>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f001 fc23 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fd0a 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f001 fc3b 	bl	8003a12 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f001 fc03 	bl	80039be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000010 	.word	0x20000010
 80021d0:	20000018 	.word	0x20000018
 80021d4:	20000014 	.word	0x20000014

080021d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000018 	.word	0x20000018
 80021fc:	20000634 	.word	0x20000634

08002200 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;  
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000634 	.word	0x20000634

08002218 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b09a      	sub	sp, #104	; 0x68
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e1c9      	b.n	80025f4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d176      	bne.n	8002360 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d152      	bne.n	8002320 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fc97 	bl	8001bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d13b      	bne.n	8002320 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f001 fa47 	bl	800373c <ADC_Disable>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12f      	bne.n	8002320 <HAL_ADC_Init+0xe0>
 80022c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d12b      	bne.n	8002320 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022fc:	4b86      	ldr	r3, [pc, #536]	; (8002518 <HAL_ADC_Init+0x2d8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a86      	ldr	r2, [pc, #536]	; (800251c <HAL_ADC_Init+0x2dc>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9a      	lsrs	r2, r3, #18
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002312:	e002      	b.n	800231a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800233c:	d110      	bne.n	8002360 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f023 0312 	bic.w	r3, r3, #18
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 8136 	bne.w	80025da <HAL_ADC_Init+0x39a>
 800236e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8131 	bne.w	80025da <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8129 	bne.w	80025da <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a0:	d004      	beq.n	80023ac <HAL_ADC_Init+0x16c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5e      	ldr	r2, [pc, #376]	; (8002520 <HAL_ADC_Init+0x2e0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_Init+0x170>
 80023ac:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_ADC_Init+0x2e4>)
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_Init+0x172>
 80023b0:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_ADC_Init+0x2e8>)
 80023b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d102      	bne.n	80023c4 <HAL_ADC_Init+0x184>
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_ADC_Init+0x2e0>)
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e01a      	b.n	80023fa <HAL_ADC_Init+0x1ba>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a55      	ldr	r2, [pc, #340]	; (8002520 <HAL_ADC_Init+0x2e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d103      	bne.n	80023d6 <HAL_ADC_Init+0x196>
 80023ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e011      	b.n	80023fa <HAL_ADC_Init+0x1ba>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_ADC_Init+0x2ec>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <HAL_ADC_Init+0x1a6>
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_ADC_Init+0x2f0>)
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e009      	b.n	80023fa <HAL_ADC_Init+0x1ba>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_ADC_Init+0x2f0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d102      	bne.n	80023f6 <HAL_ADC_Init+0x1b6>
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_ADC_Init+0x2ec>)
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e001      	b.n	80023fa <HAL_ADC_Init+0x1ba>
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_ADC_Init+0x1da>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x1da>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_ADC_Init+0x1dc>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11c      	bne.n	800245a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002420:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_ADC_Init+0x202>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Init+0x202>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_ADC_Init+0x204>
 8002442:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002458:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e5b      	ldrb	r3, [r3, #25]
 800245e:	035b      	lsls	r3, r3, #13
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002464:	2a01      	cmp	r2, #1
 8002466:	d002      	beq.n	800246e <HAL_ADC_Init+0x22e>
 8002468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800246c:	e000      	b.n	8002470 <HAL_ADC_Init+0x230>
 800246e:	2200      	movs	r2, #0
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4313      	orrs	r3, r2
 800247e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002480:	4313      	orrs	r3, r2
 8002482:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d11b      	bne.n	80024c6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7e5b      	ldrb	r3, [r3, #25]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	3b01      	subs	r3, #1
 800249c:	045a      	lsls	r2, r3, #17
 800249e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	663b      	str	r3, [r7, #96]	; 0x60
 80024a8:	e00d      	b.n	80024c6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d03a      	beq.n	8002544 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_ADC_Init+0x2ec>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_Init+0x2a2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_ADC_Init+0x2f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d128      	bne.n	8002534 <HAL_ADC_Init+0x2f4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80024ea:	d012      	beq.n	8002512 <HAL_ADC_Init+0x2d2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f4:	d00a      	beq.n	800250c <HAL_ADC_Init+0x2cc>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Init+0x2c6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	e018      	b.n	8002538 <HAL_ADC_Init+0x2f8>
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	e015      	b.n	8002538 <HAL_ADC_Init+0x2f8>
 800250c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002510:	e012      	b.n	8002538 <HAL_ADC_Init+0x2f8>
 8002512:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002516:	e00f      	b.n	8002538 <HAL_ADC_Init+0x2f8>
 8002518:	20000010 	.word	0x20000010
 800251c:	431bde83 	.word	0x431bde83
 8002520:	50000100 	.word	0x50000100
 8002524:	50000300 	.word	0x50000300
 8002528:	50000700 	.word	0x50000700
 800252c:	50000400 	.word	0x50000400
 8002530:	50000500 	.word	0x50000500
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800253c:	4313      	orrs	r3, r2
 800253e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002540:	4313      	orrs	r3, r2
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d114      	bne.n	800257c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002560:	f023 0302 	bic.w	r3, r3, #2
 8002564:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7e1b      	ldrb	r3, [r3, #24]
 800256a:	039a      	lsls	r2, r3, #14
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4313      	orrs	r3, r2
 8002576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002578:	4313      	orrs	r3, r2
 800257a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <HAL_ADC_Init+0x3bc>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800258c:	430b      	orrs	r3, r1
 800258e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 010f 	bic.w	r1, r3, #15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e007      	b.n	80025c2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020f 	bic.w	r2, r2, #15
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f023 0303 	bic.w	r3, r3, #3
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
 80025d8:	e00a      	b.n	80025f0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0312 	bic.w	r3, r3, #18
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3768      	adds	r7, #104	; 0x68
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fff0c007 	.word	0xfff0c007

08002600 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8123 	bne.w	8002862 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_Start_IT+0x2a>
 8002626:	2302      	movs	r3, #2
 8002628:	e11e      	b.n	8002868 <HAL_ADC_Start_IT+0x268>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f001 f81e 	bl	8003674 <ADC_Enable>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 810a 	bne.w	8002858 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002660:	d004      	beq.n	800266c <HAL_ADC_Start_IT+0x6c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a82      	ldr	r2, [pc, #520]	; (8002870 <HAL_ADC_Start_IT+0x270>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d106      	bne.n	800267a <HAL_ADC_Start_IT+0x7a>
 800266c:	4b81      	ldr	r3, [pc, #516]	; (8002874 <HAL_ADC_Start_IT+0x274>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_ADC_Start_IT+0x9a>
 8002678:	e005      	b.n	8002686 <HAL_ADC_Start_IT+0x86>
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <HAL_ADC_Start_IT+0x278>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_ADC_Start_IT+0x9a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268e:	d004      	beq.n	800269a <HAL_ADC_Start_IT+0x9a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a79      	ldr	r2, [pc, #484]	; (800287c <HAL_ADC_Start_IT+0x27c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d115      	bne.n	80026c6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d036      	beq.n	8002722 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026c4:	e02d      	b.n	8002722 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026da:	d004      	beq.n	80026e6 <HAL_ADC_Start_IT+0xe6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a63      	ldr	r2, [pc, #396]	; (8002870 <HAL_ADC_Start_IT+0x270>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10a      	bne.n	80026fc <HAL_ADC_Start_IT+0xfc>
 80026e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e008      	b.n	800270e <HAL_ADC_Start_IT+0x10e>
 80026fc:	4b5f      	ldr	r3, [pc, #380]	; (800287c <HAL_ADC_Start_IT+0x27c>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800271a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	d106      	bne.n	800273e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f023 0206 	bic.w	r2, r3, #6
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
 800273c:	e002      	b.n	8002744 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	221c      	movs	r2, #28
 8002752:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d110      	bne.n	800277e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0204 	bic.w	r2, r2, #4
 800276a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	605a      	str	r2, [r3, #4]
          break;
 800277c:	e008      	b.n	8002790 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 020c 	orr.w	r2, r2, #12
 800278c:	605a      	str	r2, [r3, #4]
          break;
 800278e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0210 	bic.w	r2, r2, #16
 80027a6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b0:	d004      	beq.n	80027bc <HAL_ADC_Start_IT+0x1bc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <HAL_ADC_Start_IT+0x270>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_Start_IT+0x1ca>
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_ADC_Start_IT+0x274>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03e      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 80027c8:	e005      	b.n	80027d6 <HAL_ADC_Start_IT+0x1d6>
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_ADC_Start_IT+0x278>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d037      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Start_IT+0x1ea>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_ADC_Start_IT+0x270>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d106      	bne.n	80027f8 <HAL_ADC_Start_IT+0x1f8>
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_ADC_Start_IT+0x274>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d027      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 80027f6:	e005      	b.n	8002804 <HAL_ADC_Start_IT+0x204>
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_ADC_Start_IT+0x278>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b05      	cmp	r3, #5
 8002802:	d020      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280c:	d004      	beq.n	8002818 <HAL_ADC_Start_IT+0x218>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_ADC_Start_IT+0x270>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d106      	bne.n	8002826 <HAL_ADC_Start_IT+0x226>
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_ADC_Start_IT+0x274>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b09      	cmp	r3, #9
 8002822:	d010      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 8002824:	e005      	b.n	8002832 <HAL_ADC_Start_IT+0x232>
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_ADC_Start_IT+0x278>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2b09      	cmp	r3, #9
 8002830:	d009      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283a:	d004      	beq.n	8002846 <HAL_ADC_Start_IT+0x246>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_ADC_Start_IT+0x27c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10f      	bne.n	8002866 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0204 	orr.w	r2, r2, #4
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	e006      	b.n	8002866 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002860:	e001      	b.n	8002866 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	50000100 	.word	0x50000100
 8002874:	50000300 	.word	0x50000300
 8002878:	50000700 	.word	0x50000700
 800287c:	50000400 	.word	0x50000400

08002880 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x38>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80bc 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80b6 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290c:	d004      	beq.n	8002918 <HAL_ADC_IRQHandler+0x7c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a90      	ldr	r2, [pc, #576]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d106      	bne.n	8002926 <HAL_ADC_IRQHandler+0x8a>
 8002918:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03e      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002924:	e005      	b.n	8002932 <HAL_ADC_IRQHandler+0x96>
 8002926:	4b8d      	ldr	r3, [pc, #564]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b00      	cmp	r3, #0
 8002930:	d037      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293a:	d004      	beq.n	8002946 <HAL_ADC_IRQHandler+0xaa>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a84      	ldr	r2, [pc, #528]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d106      	bne.n	8002954 <HAL_ADC_IRQHandler+0xb8>
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b05      	cmp	r3, #5
 8002950:	d027      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002952:	e005      	b.n	8002960 <HAL_ADC_IRQHandler+0xc4>
 8002954:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2b05      	cmp	r3, #5
 800295e:	d020      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002968:	d004      	beq.n	8002974 <HAL_ADC_IRQHandler+0xd8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a79      	ldr	r2, [pc, #484]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d106      	bne.n	8002982 <HAL_ADC_IRQHandler+0xe6>
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2b09      	cmp	r3, #9
 800297e:	d010      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002980:	e005      	b.n	800298e <HAL_ADC_IRQHandler+0xf2>
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2b09      	cmp	r3, #9
 800298c:	d009      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x106>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a70      	ldr	r2, [pc, #448]	; (8002b60 <HAL_ADC_IRQHandler+0x2c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d104      	bne.n	80029ac <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e00f      	b.n	80029cc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b4:	d004      	beq.n	80029c0 <HAL_ADC_IRQHandler+0x124>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a66      	ldr	r2, [pc, #408]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <HAL_ADC_IRQHandler+0x12a>
 80029c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_IRQHandler+0x12c>
 80029c6:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_ADC_IRQHandler+0x2c4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d137      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d132      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d02d      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11a      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020c 	bic.w	r2, r2, #12
 8002a0a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d112      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a30:	e00b      	b.n	8002a4a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fe72 	bl	8001734 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	220c      	movs	r2, #12
 8002a56:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x1d0>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8138 	beq.w	8002ce8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8132 	beq.w	8002ce8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x208>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0x216>
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d03e      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002ab0:	e005      	b.n	8002abe <HAL_ADC_IRQHandler+0x222>
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d037      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x236>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_IRQHandler+0x244>
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d027      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002ade:	e005      	b.n	8002aec <HAL_ADC_IRQHandler+0x250>
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d020      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af4:	d004      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x264>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d106      	bne.n	8002b0e <HAL_ADC_IRQHandler+0x272>
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_ADC_IRQHandler+0x2bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d010      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002b0c:	e005      	b.n	8002b1a <HAL_ADC_IRQHandler+0x27e>
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_ADC_IRQHandler+0x2c0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d009      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x292>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_ADC_IRQHandler+0x2c4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d104      	bne.n	8002b38 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e018      	b.n	8002b6a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x2b0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_ADC_IRQHandler+0x2b8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_IRQHandler+0x2c8>
 8002b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b50:	e009      	b.n	8002b66 <HAL_ADC_IRQHandler+0x2ca>
 8002b52:	bf00      	nop
 8002b54:	50000100 	.word	0x50000100
 8002b58:	50000300 	.word	0x50000300
 8002b5c:	50000700 	.word	0x50000700
 8002b60:	50000400 	.word	0x50000400
 8002b64:	4b92      	ldr	r3, [pc, #584]	; (8002db0 <HAL_ADC_IRQHandler+0x514>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 80b0 	bne.w	8002cda <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80a3 	bne.w	8002cda <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 809d 	bne.w	8002cda <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8097 	beq.w	8002cda <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x324>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7e      	ldr	r2, [pc, #504]	; (8002db4 <HAL_ADC_IRQHandler+0x518>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d106      	bne.n	8002bce <HAL_ADC_IRQHandler+0x332>
 8002bc0:	4b7d      	ldr	r3, [pc, #500]	; (8002db8 <HAL_ADC_IRQHandler+0x51c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03e      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002bcc:	e005      	b.n	8002bda <HAL_ADC_IRQHandler+0x33e>
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_ADC_IRQHandler+0x520>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d037      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_IRQHandler+0x352>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a72      	ldr	r2, [pc, #456]	; (8002db4 <HAL_ADC_IRQHandler+0x518>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x360>
 8002bee:	4b72      	ldr	r3, [pc, #456]	; (8002db8 <HAL_ADC_IRQHandler+0x51c>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d027      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002bfa:	e005      	b.n	8002c08 <HAL_ADC_IRQHandler+0x36c>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_ADC_IRQHandler+0x520>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d020      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_IRQHandler+0x380>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <HAL_ADC_IRQHandler+0x518>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d106      	bne.n	8002c2a <HAL_ADC_IRQHandler+0x38e>
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_ADC_IRQHandler+0x51c>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d010      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002c28:	e005      	b.n	8002c36 <HAL_ADC_IRQHandler+0x39a>
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_ADC_IRQHandler+0x520>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2b07      	cmp	r3, #7
 8002c34:	d009      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3e:	d004      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x3ae>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5a      	ldr	r2, [pc, #360]	; (8002db0 <HAL_ADC_IRQHandler+0x514>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d104      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e00f      	b.n	8002c74 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x3cc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a54      	ldr	r2, [pc, #336]	; (8002db4 <HAL_ADC_IRQHandler+0x518>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d102      	bne.n	8002c6e <HAL_ADC_IRQHandler+0x3d2>
 8002c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c6c:	e000      	b.n	8002c70 <HAL_ADC_IRQHandler+0x3d4>
 8002c6e:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_ADC_IRQHandler+0x514>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d12d      	bne.n	8002cda <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11a      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d112      	bne.n	8002cda <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc0:	e00b      	b.n	8002cda <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8c4 	bl	8002e68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2260      	movs	r2, #96	; 0x60
 8002ce6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x47a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fa85 	bl	8002218 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x4aa>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8aa 	bl	8002e90 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x4da>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f89c 	bl	8002ea4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d04f      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x584>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d04a      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e02d      	b.n	8002df4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_IRQHandler+0x510>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <HAL_ADC_IRQHandler+0x518>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0x524>
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_ADC_IRQHandler+0x51c>)
 8002dae:	e008      	b.n	8002dc2 <HAL_ADC_IRQHandler+0x526>
 8002db0:	50000400 	.word	0x50000400
 8002db4:	50000100 	.word	0x50000100
 8002db8:	50000300 	.word	0x50000300
 8002dbc:	50000700 	.word	0x50000700
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_ADC_IRQHandler+0x5c8>)
 8002dc2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10a      	bne.n	8002df4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002dde:	2301      	movs	r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e007      	b.n	8002df4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fa0a 	bl	800222c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x5c0>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f043 0208 	orr.w	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e54:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f810 	bl	8002e7c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002e5c:	bf00      	nop
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	50000700 	.word	0x50000700

08002e68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b09b      	sub	sp, #108	; 0x6c
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x22>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e2ca      	b.n	8003470 <HAL_ADC_ConfigChannel+0x5b8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 82ae 	bne.w	800344e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d81c      	bhi.n	8002f34 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	231f      	movs	r3, #31
 8002f10:	4093      	lsls	r3, r2
 8002f12:	43db      	mvns	r3, r3
 8002f14:	4019      	ands	r1, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
 8002f32:	e063      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	d81e      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	3b1e      	subs	r3, #30
 8002f50:	221f      	movs	r2, #31
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4019      	ands	r1, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	3b1e      	subs	r3, #30
 8002f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34
 8002f78:	e040      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b0e      	cmp	r3, #14
 8002f80:	d81e      	bhi.n	8002fc0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	3b3c      	subs	r3, #60	; 0x3c
 8002f96:	221f      	movs	r2, #31
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	4019      	ands	r1, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	3b3c      	subs	r3, #60	; 0x3c
 8002fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8002fbe:	e01d      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	3b5a      	subs	r3, #90	; 0x5a
 8002fd4:	221f      	movs	r2, #31
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4019      	ands	r1, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	3b5a      	subs	r3, #90	; 0x5a
 8002ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 80e5 	bne.w	80031d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b09      	cmp	r3, #9
 8003012:	d91c      	bls.n	800304e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	2207      	movs	r2, #7
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	4019      	ands	r1, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6898      	ldr	r0, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	3b1e      	subs	r3, #30
 8003040:	fa00 f203 	lsl.w	r2, r0, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e019      	b.n	8003082 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6959      	ldr	r1, [r3, #20]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	4019      	ands	r1, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6898      	ldr	r0, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	3b01      	subs	r3, #1
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d84f      	bhi.n	8003144 <HAL_ADC_ConfigChannel+0x28c>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <HAL_ADC_ConfigChannel+0x1f4>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030df 	.word	0x080030df
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003123 	.word	0x08003123
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030c2:	4b9a      	ldr	r3, [pc, #616]	; (800332c <HAL_ADC_ConfigChannel+0x474>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	0691      	lsls	r1, r2, #26
 80030cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ce:	430a      	orrs	r2, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030dc:	e07e      	b.n	80031dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030e4:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_ADC_ConfigChannel+0x474>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	0691      	lsls	r1, r2, #26
 80030ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f0:	430a      	orrs	r2, r1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030fc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030fe:	e06d      	b.n	80031dc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003106:	4b89      	ldr	r3, [pc, #548]	; (800332c <HAL_ADC_ConfigChannel+0x474>)
 8003108:	4013      	ands	r3, r2
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	0691      	lsls	r1, r2, #26
 8003110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003112:	430a      	orrs	r2, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800311e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003120:	e05c      	b.n	80031dc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003128:	4b80      	ldr	r3, [pc, #512]	; (800332c <HAL_ADC_ConfigChannel+0x474>)
 800312a:	4013      	ands	r3, r2
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	0691      	lsls	r1, r2, #26
 8003132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003134:	430a      	orrs	r2, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003140:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003142:	e04b      	b.n	80031dc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	069b      	lsls	r3, r3, #26
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	429a      	cmp	r2, r3
 800317a:	d107      	bne.n	800318c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800318a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	429a      	cmp	r2, r3
 800319e:	d107      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ae:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	069b      	lsls	r3, r3, #26
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10a      	bne.n	80031da <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80031d4:	e001      	b.n	80031da <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <HAL_ADC_ConfigChannel+0x324>
      break;
 80031da:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d108      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x344>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x344>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_ADC_ConfigChannel+0x346>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8130 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d00f      	beq.n	800322c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	400a      	ands	r2, r1
 8003226:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800322a:	e049      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b09      	cmp	r3, #9
 800324c:	d91c      	bls.n	8003288 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6999      	ldr	r1, [r3, #24]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	3b1b      	subs	r3, #27
 8003260:	2207      	movs	r2, #7
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	4019      	ands	r1, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6898      	ldr	r0, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	3b1b      	subs	r3, #27
 800327a:	fa00 f203 	lsl.w	r2, r0, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
 8003286:	e01b      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6959      	ldr	r1, [r3, #20]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	4019      	ands	r1, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6898      	ldr	r0, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	fa00 f203 	lsl.w	r2, r0, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x41c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_ADC_ConfigChannel+0x478>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x420>
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_ADC_ConfigChannel+0x47c>)
 80032d6:	e000      	b.n	80032da <HAL_ADC_ConfigChannel+0x422>
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_ADC_ConfigChannel+0x480>)
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d105      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80032f4:	2b11      	cmp	r3, #17
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003308:	2b12      	cmp	r3, #18
 800330a:	f040 80ab 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 80a4 	bne.w	8003464 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003324:	d10a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x484>
 8003326:	4b02      	ldr	r3, [pc, #8]	; (8003330 <HAL_ADC_ConfigChannel+0x478>)
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e022      	b.n	8003372 <HAL_ADC_ConfigChannel+0x4ba>
 800332c:	83fff000 	.word	0x83fff000
 8003330:	50000100 	.word	0x50000100
 8003334:	50000300 	.word	0x50000300
 8003338:	50000700 	.word	0x50000700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_ADC_ConfigChannel+0x5c4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d103      	bne.n	800334e <HAL_ADC_ConfigChannel+0x496>
 8003346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e011      	b.n	8003372 <HAL_ADC_ConfigChannel+0x4ba>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a4b      	ldr	r2, [pc, #300]	; (8003480 <HAL_ADC_ConfigChannel+0x5c8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d102      	bne.n	800335e <HAL_ADC_ConfigChannel+0x4a6>
 8003358:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <HAL_ADC_ConfigChannel+0x5cc>)
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	e009      	b.n	8003372 <HAL_ADC_ConfigChannel+0x4ba>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a48      	ldr	r2, [pc, #288]	; (8003484 <HAL_ADC_ConfigChannel+0x5cc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_ADC_ConfigChannel+0x4b6>
 8003368:	4b45      	ldr	r3, [pc, #276]	; (8003480 <HAL_ADC_ConfigChannel+0x5c8>)
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e001      	b.n	8003372 <HAL_ADC_ConfigChannel+0x4ba>
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x4da>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x4da>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_ADC_ConfigChannel+0x4dc>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d150      	bne.n	800343a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003398:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x502>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x502>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_ADC_ConfigChannel+0x504>
 80033ba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d13c      	bne.n	800343a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d11d      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x54c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d0:	d118      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80033d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_ADC_ConfigChannel+0x5d0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2a      	ldr	r2, [pc, #168]	; (800348c <HAL_ADC_ConfigChannel+0x5d4>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003402:	e02e      	b.n	8003462 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b11      	cmp	r3, #17
 800340a:	d10b      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x56c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003414:	d106      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003422:	e01e      	b.n	8003462 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d11a      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800342c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003438:	e013      	b.n	8003462 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800344c:	e00a      	b.n	8003464 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003460:	e000      	b.n	8003464 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003462:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800346c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003470:	4618      	mov	r0, r3
 8003472:	376c      	adds	r7, #108	; 0x6c
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	50000100 	.word	0x50000100
 8003480:	50000400 	.word	0x50000400
 8003484:	50000500 	.word	0x50000500
 8003488:	20000010 	.word	0x20000010
 800348c:	431bde83 	.word	0x431bde83

08003490 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003490:	b480      	push	{r7}
 8003492:	b099      	sub	sp, #100	; 0x64
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d102      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80034aa:	4b6d      	ldr	r3, [pc, #436]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	e01a      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d103      	bne.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80034ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	e011      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a67      	ldr	r2, [pc, #412]	; (8003664 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034cc:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	e009      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a64      	ldr	r2, [pc, #400]	; (8003668 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d102      	bne.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	e001      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b0      	b.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0a9      	b.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 808d 	bne.w	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8086 	bne.w	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800352c:	d004      	beq.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4b      	ldr	r2, [pc, #300]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003538:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800353a:	e000      	b.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800353e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d040      	beq.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800355a:	035b      	lsls	r3, r3, #13
 800355c:	430b      	orrs	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003562:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d15c      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80035a6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d14b      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035b4:	f023 030f 	bic.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	6811      	ldr	r1, [r2, #0]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c8:	e03c      	b.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d108      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d123      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003618:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d112      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800361e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003626:	f023 030f 	bic.w	r3, r3, #15
 800362a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800362c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800362e:	e009      	b.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003642:	e000      	b.n	8003646 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003644:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800364e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003652:	4618      	mov	r0, r3
 8003654:	3764      	adds	r7, #100	; 0x64
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	50000100 	.word	0x50000100
 8003664:	50000400 	.word	0x50000400
 8003668:	50000500 	.word	0x50000500
 800366c:	50000300 	.word	0x50000300
 8003670:	50000700 	.word	0x50000700

08003674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d108      	bne.n	80036a0 <ADC_Enable+0x2c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <ADC_Enable+0x2c>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <ADC_Enable+0x2e>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d143      	bne.n	800372e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	4b22      	ldr	r3, [pc, #136]	; (8003738 <ADC_Enable+0xc4>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e02f      	b.n	8003730 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80036e0:	f7fe fd8e 	bl	8002200 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036e6:	e01b      	b.n	8003720 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036e8:	f7fe fd8a 	bl	8002200 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d914      	bls.n	8003720 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d00d      	beq.n	8003720 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e007      	b.n	8003730 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d1dc      	bne.n	80036e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	8000003f 	.word	0x8000003f

0800373c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d108      	bne.n	8003768 <ADC_Disable+0x2c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <ADC_Disable+0x2c>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <ADC_Disable+0x2e>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d047      	beq.n	80037fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030d 	and.w	r3, r3, #13
 8003778:	2b01      	cmp	r3, #1
 800377a:	d10f      	bne.n	800379c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0202 	orr.w	r2, r2, #2
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2203      	movs	r2, #3
 8003792:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003794:	f7fe fd34 	bl	8002200 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800379a:	e029      	b.n	80037f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f043 0210 	orr.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e023      	b.n	8003800 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037b8:	f7fe fd22 	bl	8002200 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d914      	bls.n	80037f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10d      	bne.n	80037f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0210 	orr.w	r2, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d0dc      	beq.n	80037b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	60d3      	str	r3, [r2, #12]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <__NVIC_GetPriorityGrouping+0x18>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0307 	and.w	r3, r3, #7
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4907      	ldr	r1, [pc, #28]	; (80038a4 <__NVIC_EnableIRQ+0x38>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2001      	movs	r0, #1
 800388e:	fa00 f202 	lsl.w	r2, r0, r2
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	; (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003974:	d301      	bcc.n	800397a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003976:	2301      	movs	r3, #1
 8003978:	e00f      	b.n	800399a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <SysTick_Config+0x40>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003982:	210f      	movs	r1, #15
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f7ff ff8e 	bl	80038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <SysTick_Config+0x40>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <SysTick_Config+0x40>)
 8003994:	2207      	movs	r2, #7
 8003996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	e000e010 	.word	0xe000e010

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff29 	bl	8003808 <__NVIC_SetPriorityGrouping>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d0:	f7ff ff3e 	bl	8003850 <__NVIC_GetPriorityGrouping>
 80039d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff8e 	bl	80038fc <NVIC_EncodePriority>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff5d 	bl	80038a8 <__NVIC_SetPriority>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff31 	bl	800386c <__NVIC_EnableIRQ>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffa2 	bl	8003964 <SysTick_Config>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d008      	beq.n	8003a4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e020      	b.n	8003a90 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 020e 	bic.w	r2, r2, #14
 8003a5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d005      	beq.n	8003abe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e027      	b.n	8003b0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 020e 	bic.w	r2, r2, #14
 8003acc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
    } 
  }
  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b26:	e154      	b.n	8003dd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8146 	beq.w	8003dcc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d005      	beq.n	8003b58 <HAL_GPIO_Init+0x40>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d130      	bne.n	8003bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b8e:	2201      	movs	r2, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0201 	and.w	r2, r3, #1
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d017      	beq.n	8003bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d123      	bne.n	8003c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	6939      	ldr	r1, [r7, #16]
 8003c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a0 	beq.w	8003dcc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8c:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_GPIO_Init+0x2d8>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a57      	ldr	r2, [pc, #348]	; (8003df0 <HAL_GPIO_Init+0x2d8>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6193      	str	r3, [r2, #24]
 8003c98:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <HAL_GPIO_Init+0x2d8>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ca4:	4a53      	ldr	r2, [pc, #332]	; (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cce:	d019      	beq.n	8003d04 <HAL_GPIO_Init+0x1ec>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a49      	ldr	r2, [pc, #292]	; (8003df8 <HAL_GPIO_Init+0x2e0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_GPIO_Init+0x1e8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00d      	beq.n	8003cfc <HAL_GPIO_Init+0x1e4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a47      	ldr	r2, [pc, #284]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <HAL_GPIO_Init+0x1e0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a46      	ldr	r2, [pc, #280]	; (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_GPIO_Init+0x1dc>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e008      	b.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003cf4:	2305      	movs	r3, #5
 8003cf6:	e006      	b.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e004      	b.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e002      	b.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003d04:	2300      	movs	r3, #0
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	f002 0203 	and.w	r2, r2, #3
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	4093      	lsls	r3, r2
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d16:	4937      	ldr	r1, [pc, #220]	; (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d24:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f aea3 	bne.w	8003b28 <HAL_GPIO_Init+0x10>
  }
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40010000 	.word	0x40010000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	48000800 	.word	0x48000800
 8003e00:	48000c00 	.word	0x48000c00
 8003e04:	48001000 	.word	0x48001000
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e28:	e002      	b.n	8003e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e081      	b.n	8003f52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd ff3e 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	e006      	b.n	8003ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d104      	bne.n	8003ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d138      	bne.n	8003fe2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e032      	b.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6819      	ldr	r1, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e000      	b.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	d139      	bne.n	800407a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004010:	2302      	movs	r3, #2
 8004012:	e033      	b.n	800407c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004042:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b08b      	sub	sp, #44	; 0x2c
 800408c:	af06      	add	r7, sp, #24
 800408e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0c4      	b.n	8004224 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd ff76 	bl	8001fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2203      	movs	r2, #3
 80040b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 f9b7 	bl	8008434 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e040      	b.n	800414e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	440b      	add	r3, r1
 80040dc:	3301      	adds	r3, #1
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	440b      	add	r3, r1
 80040f2:	7bfa      	ldrb	r2, [r7, #15]
 80040f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	440b      	add	r3, r1
 8004106:	3303      	adds	r3, #3
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	3338      	adds	r3, #56	; 0x38
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	333c      	adds	r3, #60	; 0x3c
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	3340      	adds	r3, #64	; 0x40
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	3301      	adds	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d3b9      	bcc.n	80040cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e044      	b.n	80041e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	440b      	add	r3, r1
 800416c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	3301      	adds	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3b5      	bcc.n	800415e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	687e      	ldr	r6, [r7, #4]
 80041fa:	466d      	mov	r5, sp
 80041fc:	f106 0410 	add.w	r4, r6, #16
 8004200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	1d33      	adds	r3, r6, #4
 800420a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800420c:	6838      	ldr	r0, [r7, #0]
 800420e:	f004 f92c 	bl	800846a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004232:	af00      	add	r7, sp, #0
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f001 b823 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 817d 	beq.w	8004562 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004268:	4bbc      	ldr	r3, [pc, #752]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b04      	cmp	r3, #4
 8004272:	d00c      	beq.n	800428e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004274:	4bb9      	ldr	r3, [pc, #740]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b08      	cmp	r3, #8
 800427e:	d15c      	bne.n	800433a <HAL_RCC_OscConfig+0x10e>
 8004280:	4bb6      	ldr	r3, [pc, #728]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d155      	bne.n	800433a <HAL_RCC_OscConfig+0x10e>
 800428e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004292:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_RCC_OscConfig+0x94>
 80042ba:	4ba8      	ldr	r3, [pc, #672]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	e015      	b.n	80042ec <HAL_RCC_OscConfig+0xc0>
 80042c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80042e8:	4b9c      	ldr	r3, [pc, #624]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042f8:	fa92 f2a2 	rbit	r2, r2
 80042fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004300:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f042 0220 	orr.w	r2, r2, #32
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f002 021f 	and.w	r2, r2, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f202 	lsl.w	r2, r1, r2
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 811f 	beq.w	8004560 <HAL_RCC_OscConfig+0x334>
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 8116 	bne.w	8004560 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f000 bfaf 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x12e>
 800434c:	4b83      	ldr	r3, [pc, #524]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a82      	ldr	r2, [pc, #520]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e036      	b.n	80043c8 <HAL_RCC_OscConfig+0x19c>
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x158>
 800436a:	4b7c      	ldr	r3, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7b      	ldr	r2, [pc, #492]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b79      	ldr	r3, [pc, #484]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800437c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e021      	b.n	80043c8 <HAL_RCC_OscConfig+0x19c>
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x184>
 8004396:	4b71      	ldr	r3, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a70      	ldr	r2, [pc, #448]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b6e      	ldr	r3, [pc, #440]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6d      	ldr	r2, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x19c>
 80043b0:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a69      	ldr	r2, [pc, #420]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b67      	ldr	r3, [pc, #412]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a66      	ldr	r2, [pc, #408]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f023 020f 	bic.w	r2, r3, #15
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	495f      	ldr	r1, [pc, #380]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d059      	beq.n	80044a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fd ff05 	bl	8002200 <HAL_GetTick>
 80043f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd ff00 	bl	8002200 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d902      	bls.n	8004412 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	f000 bf43 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 8004412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004416:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004426:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d102      	bne.n	8004444 <HAL_RCC_OscConfig+0x218>
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e015      	b.n	8004470 <HAL_RCC_OscConfig+0x244>
 8004444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004448:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004450:	fa93 f3a3 	rbit	r3, r3
 8004454:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800445c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004460:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x330>)
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004474:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004478:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800447c:	fa92 f2a2 	rbit	r2, r2
 8004480:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004484:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004488:	fab2 f282 	clz	r2, r2
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f042 0220 	orr.w	r2, r2, #32
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f002 021f 	and.w	r2, r2, #31
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f202 	lsl.w	r2, r1, r2
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ab      	beq.n	80043fc <HAL_RCC_OscConfig+0x1d0>
 80044a4:	e05d      	b.n	8004562 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd feab 	bl	8002200 <HAL_GetTick>
 80044aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fd fea6 	bl	8002200 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b64      	cmp	r3, #100	; 0x64
 80044be:	d902      	bls.n	80044c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	f000 bee9 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 80044c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2cc>
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <HAL_RCC_OscConfig+0x330>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	e015      	b.n	8004524 <HAL_RCC_OscConfig+0x2f8>
 80044f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800450c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004510:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004514:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x330>)
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004528:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800452c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004530:	fa92 f2a2 	rbit	r2, r2
 8004534:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004538:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800453c:	fab2 f282 	clz	r2, r2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	f042 0220 	orr.w	r2, r2, #32
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	f002 021f 	and.w	r2, r2, #31
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f202 	lsl.w	r2, r1, r2
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ab      	bne.n	80044b0 <HAL_RCC_OscConfig+0x284>
 8004558:	e003      	b.n	8004562 <HAL_RCC_OscConfig+0x336>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 817d 	beq.w	8004872 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004578:	4ba6      	ldr	r3, [pc, #664]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004584:	4ba3      	ldr	r3, [pc, #652]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d172      	bne.n	8004676 <HAL_RCC_OscConfig+0x44a>
 8004590:	4ba0      	ldr	r3, [pc, #640]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d16c      	bne.n	8004676 <HAL_RCC_OscConfig+0x44a>
 800459c:	2302      	movs	r3, #2
 800459e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_OscConfig+0x3a0>
 80045c6:	4b93      	ldr	r3, [pc, #588]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e013      	b.n	80045f4 <HAL_RCC_OscConfig+0x3c8>
 80045cc:	2302      	movs	r3, #2
 80045ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045de:	2302      	movs	r3, #2
 80045e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2202      	movs	r2, #2
 80045f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045fe:	fa92 f2a2 	rbit	r2, r2
 8004602:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004606:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f042 0220 	orr.w	r2, r2, #32
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f002 021f 	and.w	r2, r2, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCC_OscConfig+0x410>
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d002      	beq.n	800463c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f000 be2e 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b75      	ldr	r3, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	21f8      	movs	r1, #248	; 0xf8
 8004652:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800465a:	fa91 f1a1 	rbit	r1, r1
 800465e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004662:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004666:	fab1 f181 	clz	r1, r1
 800466a:	b2c9      	uxtb	r1, r1
 800466c:	408b      	lsls	r3, r1
 800466e:	4969      	ldr	r1, [pc, #420]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004674:	e0fd      	b.n	8004872 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8088 	beq.w	8004798 <HAL_RCC_OscConfig+0x56c>
 8004688:	2301      	movs	r3, #1
 800468a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800469a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	2301      	movs	r3, #1
 80046b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd fda4 	bl	8002200 <HAL_GetTick>
 80046b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046be:	f7fd fd9f 	bl	8002200 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	f000 bde2 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d102      	bne.n	8004704 <HAL_RCC_OscConfig+0x4d8>
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	e013      	b.n	800472c <HAL_RCC_OscConfig+0x500>
 8004704:	2302      	movs	r3, #2
 8004706:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004716:	2302      	movs	r3, #2
 8004718:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800471c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004728:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2202      	movs	r2, #2
 800472e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004732:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004736:	fa92 f2a2 	rbit	r2, r2
 800473a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800473e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004742:	fab2 f282 	clz	r2, r2
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	f042 0220 	orr.w	r2, r2, #32
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	f002 021f 	and.w	r2, r2, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0af      	beq.n	80046be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	21f8      	movs	r1, #248	; 0xf8
 8004774:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800477c:	fa91 f1a1 	rbit	r1, r1
 8004780:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004784:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004788:	fab1 f181 	clz	r1, r1
 800478c:	b2c9      	uxtb	r1, r1
 800478e:	408b      	lsls	r3, r1
 8004790:	4920      	ldr	r1, [pc, #128]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
 8004796:	e06c      	b.n	8004872 <HAL_RCC_OscConfig+0x646>
 8004798:	2301      	movs	r3, #1
 800479a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80047aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fd fd1c 	bl	8002200 <HAL_GetTick>
 80047c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fd fd17 	bl	8002200 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d902      	bls.n	80047e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	f000 bd5a 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d104      	bne.n	8004818 <HAL_RCC_OscConfig+0x5ec>
 800480e:	4b01      	ldr	r3, [pc, #4]	; (8004814 <HAL_RCC_OscConfig+0x5e8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	e015      	b.n	8004840 <HAL_RCC_OscConfig+0x614>
 8004814:	40021000 	.word	0x40021000
 8004818:	2302      	movs	r3, #2
 800481a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800482a:	2302      	movs	r3, #2
 800482c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800483c:	4bc8      	ldr	r3, [pc, #800]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004846:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800484a:	fa92 f2a2 	rbit	r2, r2
 800484e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004852:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004856:	fab2 f282 	clz	r2, r2
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f042 0220 	orr.w	r2, r2, #32
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f002 021f 	and.w	r2, r2, #31
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1ad      	bne.n	80047ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8110 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d079      	beq.n	800498c <HAL_RCC_OscConfig+0x760>
 8004898:	2301      	movs	r3, #1
 800489a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	4bab      	ldr	r3, [pc, #684]	; (8004b64 <HAL_RCC_OscConfig+0x938>)
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	461a      	mov	r2, r3
 80048be:	2301      	movs	r3, #1
 80048c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7fd fc9d 	bl	8002200 <HAL_GetTick>
 80048c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fd fc98 	bl	8002200 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d902      	bls.n	80048e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	f000 bcdb 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 80048e2:	2302      	movs	r3, #2
 80048e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048fc:	2202      	movs	r2, #2
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004904:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	fa93 f2a3 	rbit	r2, r3
 800490e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004920:	2202      	movs	r2, #2
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	fa93 f2a3 	rbit	r2, r3
 8004932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800493a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493c:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 800493e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004948:	2102      	movs	r1, #2
 800494a:	6019      	str	r1, [r3, #0]
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fa93 f1a3 	rbit	r1, r3
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004962:	6019      	str	r1, [r3, #0]
  return result;
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0a0      	beq.n	80048cc <HAL_RCC_OscConfig+0x6a0>
 800498a:	e08d      	b.n	8004aa8 <HAL_RCC_OscConfig+0x87c>
 800498c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	fa93 f2a3 	rbit	r2, r3
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ae:	601a      	str	r2, [r3, #0]
  return result;
 80049b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <HAL_RCC_OscConfig+0x938>)
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ce:	f7fd fc17 	bl	8002200 <HAL_GetTick>
 80049d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd fc12 	bl	8002200 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d902      	bls.n	80049ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	f000 bc55 	b.w	8005298 <HAL_RCC_OscConfig+0x106c>
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049f6:	2202      	movs	r2, #2
 80049f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	fa93 f2a3 	rbit	r2, r3
 8004a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fa93 f2a3 	rbit	r2, r3
 8004a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	2202      	movs	r2, #2
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	fa93 f2a3 	rbit	r2, r3
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a66:	2102      	movs	r1, #2
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	fa93 f1a3 	rbit	r1, r3
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a80:	6019      	str	r1, [r3, #0]
  return result;
 8004a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fab3 f383 	clz	r3, r3
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d197      	bne.n	80049d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 81a1 	beq.w	8004e00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad0:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	61d3      	str	r3, [r2, #28]
 8004adc:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004af6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_RCC_OscConfig+0x93c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d11a      	bne.n	8004b40 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_RCC_OscConfig+0x93c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_RCC_OscConfig+0x93c>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b16:	f7fd fb73 	bl	8002200 <HAL_GetTick>
 8004b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1e:	e009      	b.n	8004b34 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fd fb6e 	bl	8002200 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	; 0x64
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e3b1      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <HAL_RCC_OscConfig+0x93c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ef      	beq.n	8004b20 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCC_OscConfig+0x940>
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4a02      	ldr	r2, [pc, #8]	; (8004b60 <HAL_RCC_OscConfig+0x934>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6213      	str	r3, [r2, #32]
 8004b5c:	e03c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x9ac>
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	10908120 	.word	0x10908120
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCC_OscConfig+0x96a>
 8004b7c:	4bc1      	ldr	r3, [pc, #772]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4ac0      	ldr	r2, [pc, #768]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	6213      	str	r3, [r2, #32]
 8004b88:	4bbe      	ldr	r3, [pc, #760]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4abd      	ldr	r2, [pc, #756]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004b8e:	f023 0304 	bic.w	r3, r3, #4
 8004b92:	6213      	str	r3, [r2, #32]
 8004b94:	e020      	b.n	8004bd8 <HAL_RCC_OscConfig+0x9ac>
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x994>
 8004ba6:	4bb7      	ldr	r3, [pc, #732]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4ab6      	ldr	r2, [pc, #728]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6213      	str	r3, [r2, #32]
 8004bb2:	4bb4      	ldr	r3, [pc, #720]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4ab3      	ldr	r2, [pc, #716]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6213      	str	r3, [r2, #32]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x9ac>
 8004bc0:	4bb0      	ldr	r3, [pc, #704]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4aaf      	ldr	r2, [pc, #700]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6213      	str	r3, [r2, #32]
 8004bcc:	4bad      	ldr	r3, [pc, #692]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4aac      	ldr	r2, [pc, #688]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8081 	beq.w	8004cec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fd fb09 	bl	8002200 <HAL_GetTick>
 8004bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fb04 	bl	8002200 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e345      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
 8004c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c14:	2202      	movs	r2, #2
 8004c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	fa93 f2a3 	rbit	r2, r3
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c38:	2202      	movs	r2, #2
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	fa93 f2a3 	rbit	r2, r3
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c52:	601a      	str	r2, [r3, #0]
  return result;
 8004c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f043 0302 	orr.w	r3, r3, #2
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_OscConfig+0xa4c>
 8004c72:	4b84      	ldr	r3, [pc, #528]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	e013      	b.n	8004ca0 <HAL_RCC_OscConfig+0xa74>
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c80:	2202      	movs	r2, #2
 8004c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	fa93 f2a3 	rbit	r2, r3
 8004c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	4b79      	ldr	r3, [pc, #484]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ca8:	2102      	movs	r1, #2
 8004caa:	6011      	str	r1, [r2, #0]
 8004cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cb0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	fa92 f1a2 	rbit	r1, r2
 8004cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cc2:	6011      	str	r1, [r2, #0]
  return result;
 8004cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cc8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	fab2 f282 	clz	r2, r2
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	f002 021f 	and.w	r2, r2, #31
 8004cde:	2101      	movs	r1, #1
 8004ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d084      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x9c8>
 8004cea:	e07f      	b.n	8004dec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cec:	f7fd fa88 	bl	8002200 <HAL_GetTick>
 8004cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf4:	e00b      	b.n	8004d0e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd fa83 	bl	8002200 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e2c4      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d16:	2202      	movs	r2, #2
 8004d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	fa93 f2a3 	rbit	r2, r3
 8004d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fa93 f2a3 	rbit	r2, r3
 8004d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d54:	601a      	str	r2, [r3, #0]
  return result;
 8004d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f043 0302 	orr.w	r3, r3, #2
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d102      	bne.n	8004d7a <HAL_RCC_OscConfig+0xb4e>
 8004d74:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	e013      	b.n	8004da2 <HAL_RCC_OscConfig+0xb76>
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d82:	2202      	movs	r2, #2
 8004d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	fa93 f2a3 	rbit	r2, r3
 8004d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004daa:	2102      	movs	r1, #2
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	fa92 f1a2 	rbit	r1, r2
 8004dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dc4:	6011      	str	r1, [r2, #0]
  return result;
 8004dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	fab2 f282 	clz	r2, r2
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	f002 021f 	and.w	r2, r2, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f202 	lsl.w	r2, r1, r2
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d184      	bne.n	8004cf6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df4:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8242 	beq.w	8005296 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <HAL_RCC_OscConfig+0xc58>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	f000 8213 	beq.w	8005246 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	f040 8162 	bne.w	80050f6 <HAL_RCC_OscConfig+0xeca>
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	fa93 f2a3 	rbit	r2, r3
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e56:	601a      	str	r2, [r3, #0]
  return result;
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd f9c2 	bl	8002200 <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e80:	e00c      	b.n	8004e9c <HAL_RCC_OscConfig+0xc70>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd f9ba 	bl	8002200 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1fd      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
 8004e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	fa93 f2a3 	rbit	r2, r3
 8004eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ec0:	601a      	str	r2, [r3, #0]
  return result;
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004eca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_OscConfig+0xcba>
 8004ee0:	4bb0      	ldr	r3, [pc, #704]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	e027      	b.n	8004f36 <HAL_RCC_OscConfig+0xd0a>
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	fa93 f2a3 	rbit	r2, r3
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	fa93 f2a3 	rbit	r2, r3
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	4b9c      	ldr	r3, [pc, #624]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f42:	6011      	str	r1, [r2, #0]
 8004f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f48:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	fa92 f1a2 	rbit	r1, r2
 8004f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f56:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f5a:	6011      	str	r1, [r2, #0]
  return result;
 8004f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f60:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	fab2 f282 	clz	r2, r2
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	f042 0220 	orr.w	r2, r2, #32
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	f002 021f 	and.w	r2, r2, #31
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d182      	bne.n	8004e88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f82:	4b88      	ldr	r3, [pc, #544]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	497f      	ldr	r1, [pc, #508]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fce:	601a      	str	r2, [r3, #0]
  return result;
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fd8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	461a      	mov	r2, r3
 8004fec:	2301      	movs	r3, #1
 8004fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd f906 	bl	8002200 <HAL_GetTick>
 8004ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ff8:	e009      	b.n	800500e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fd f901 	bl	8002200 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e144      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
 800500e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005012:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800501a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	fa93 f2a3 	rbit	r2, r3
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005032:	601a      	str	r2, [r3, #0]
  return result;
 8005034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005038:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800503c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_RCC_OscConfig+0xe2c>
 8005052:	4b54      	ldr	r3, [pc, #336]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	e027      	b.n	80050a8 <HAL_RCC_OscConfig+0xe7c>
 8005058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	fa93 f2a3 	rbit	r2, r3
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005082:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	fa93 f2a3 	rbit	r2, r3
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	fa92 f1a2 	rbit	r1, r2
 80050c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050cc:	6011      	str	r1, [r2, #0]
  return result;
 80050ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	fab2 f282 	clz	r2, r2
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	f042 0220 	orr.w	r2, r2, #32
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	f002 021f 	and.w	r2, r2, #31
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f202 	lsl.w	r2, r1, r2
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d082      	beq.n	8004ffa <HAL_RCC_OscConfig+0xdce>
 80050f4:	e0cf      	b.n	8005296 <HAL_RCC_OscConfig+0x106a>
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	fa93 f2a3 	rbit	r2, r3
 8005112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005116:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800511a:	601a      	str	r2, [r3, #0]
  return result;
 800511c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005120:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005124:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	461a      	mov	r2, r3
 8005138:	2300      	movs	r3, #0
 800513a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd f860 	bl	8002200 <HAL_GetTick>
 8005140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005144:	e009      	b.n	800515a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005146:	f7fd f85b 	bl	8002200 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e09e      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
 800515a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	fa93 f2a3 	rbit	r2, r3
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800517e:	601a      	str	r2, [r3, #0]
  return result;
 8005180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005184:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005188:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518a:	fab3 f383 	clz	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d104      	bne.n	80051a8 <HAL_RCC_OscConfig+0xf7c>
 800519e:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <HAL_RCC_OscConfig+0xf78>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	e029      	b.n	80051f8 <HAL_RCC_OscConfig+0xfcc>
 80051a4:	40021000 	.word	0x40021000
 80051a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	fa93 f2a3 	rbit	r2, r3
 80051c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	fa93 f2a3 	rbit	r2, r3
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <HAL_RCC_OscConfig+0x1078>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005200:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005204:	6011      	str	r1, [r2, #0]
 8005206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	fa92 f1a2 	rbit	r1, r2
 8005214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005218:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800521c:	6011      	str	r1, [r2, #0]
  return result;
 800521e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005222:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	fab2 f282 	clz	r2, r2
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	f042 0220 	orr.w	r2, r2, #32
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	f002 021f 	and.w	r2, r2, #31
 8005238:	2101      	movs	r1, #1
 800523a:	fa01 f202 	lsl.w	r2, r1, r2
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d180      	bne.n	8005146 <HAL_RCC_OscConfig+0xf1a>
 8005244:	e027      	b.n	8005296 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01e      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCC_OscConfig+0x1078>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005262:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005266:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	429a      	cmp	r2, r3
 8005278:	d10b      	bne.n	8005292 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800527a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800527e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000

080052a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b09e      	sub	sp, #120	; 0x78
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e162      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c0:	4b90      	ldr	r3, [pc, #576]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d910      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ce:	4b8d      	ldr	r3, [pc, #564]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f023 0207 	bic.w	r2, r3, #7
 80052d6:	498b      	ldr	r1, [pc, #556]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	4313      	orrs	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052de:	4b89      	ldr	r3, [pc, #548]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e14a      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b82      	ldr	r3, [pc, #520]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	497f      	ldr	r1, [pc, #508]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 800530a:	4313      	orrs	r3, r2
 800530c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80dc 	beq.w	80054d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d13c      	bne.n	800539e <HAL_RCC_ClockConfig+0xf6>
 8005324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005328:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <HAL_RCC_ClockConfig+0xa6>
 8005348:	4b6f      	ldr	r3, [pc, #444]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	e00f      	b.n	800536e <HAL_RCC_ClockConfig+0xc6>
 800534e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	667b      	str	r3, [r7, #100]	; 0x64
 800535c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
 8005362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536a:	4b67      	ldr	r3, [pc, #412]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005372:	65ba      	str	r2, [r7, #88]	; 0x58
 8005374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005376:	fa92 f2a2 	rbit	r2, r2
 800537a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800537c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d17b      	bne.n	8005492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0f3      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d13c      	bne.n	8005420 <HAL_RCC_ClockConfig+0x178>
 80053a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	fab3 f383 	clz	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d102      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x128>
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	e00f      	b.n	80053f0 <HAL_RCC_ClockConfig+0x148>
 80053d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
 80053e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	4b46      	ldr	r3, [pc, #280]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80053f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f8:	fa92 f2a2 	rbit	r2, r2
 80053fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80053fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005400:	fab2 f282 	clz	r2, r2
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	f042 0220 	orr.w	r2, r2, #32
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	f002 021f 	and.w	r2, r2, #31
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f202 	lsl.w	r2, r1, r2
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d13a      	bne.n	8005492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0b2      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
 8005420:	2302      	movs	r3, #2
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_RCC_ClockConfig+0x1a0>
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	e00d      	b.n	8005464 <HAL_RCC_ClockConfig+0x1bc>
 8005448:	2302      	movs	r3, #2
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
 8005454:	2302      	movs	r3, #2
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	4b29      	ldr	r3, [pc, #164]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2202      	movs	r2, #2
 8005466:	61ba      	str	r2, [r7, #24]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	617a      	str	r2, [r7, #20]
  return result;
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	fab2 f282 	clz	r2, r2
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	f042 0220 	orr.w	r2, r2, #32
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	f002 021f 	and.w	r2, r2, #31
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e079      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	491a      	ldr	r1, [pc, #104]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a4:	f7fc feac 	bl	8002200 <HAL_GetTick>
 80054a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fc fea8 	bl	8002200 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e061      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <HAL_RCC_ClockConfig+0x260>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d214      	bcs.n	800550c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 0207 	bic.w	r2, r3, #7
 80054ea:	4906      	ldr	r1, [pc, #24]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b04      	ldr	r3, [pc, #16]	; (8005504 <HAL_RCC_ClockConfig+0x25c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e040      	b.n	8005586 <HAL_RCC_ClockConfig+0x2de>
 8005504:	40022000 	.word	0x40022000
 8005508:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCC_ClockConfig+0x2e8>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	491a      	ldr	r1, [pc, #104]	; (8005590 <HAL_RCC_ClockConfig+0x2e8>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005536:	4b16      	ldr	r3, [pc, #88]	; (8005590 <HAL_RCC_ClockConfig+0x2e8>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4912      	ldr	r1, [pc, #72]	; (8005590 <HAL_RCC_ClockConfig+0x2e8>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800554a:	f000 f829 	bl	80055a0 <HAL_RCC_GetSysClockFreq>
 800554e:	4601      	mov	r1, r0
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <HAL_RCC_ClockConfig+0x2e8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005558:	22f0      	movs	r2, #240	; 0xf0
 800555a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	fa92 f2a2 	rbit	r2, r2
 8005562:	60fa      	str	r2, [r7, #12]
  return result;
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	fab2 f282 	clz	r2, r2
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	40d3      	lsrs	r3, r2
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <HAL_RCC_ClockConfig+0x2ec>)
 8005570:	5cd3      	ldrb	r3, [r2, r3]
 8005572:	fa21 f303 	lsr.w	r3, r1, r3
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_RCC_ClockConfig+0x2f0>)
 8005578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCC_ClockConfig+0x2f4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fc fdfa 	bl	8002178 <HAL_InitTick>
  
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3778      	adds	r7, #120	; 0x78
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	080095b8 	.word	0x080095b8
 8005598:	20000010 	.word	0x20000010
 800559c:	20000014 	.word	0x20000014

080055a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b08b      	sub	sp, #44	; 0x2c
 80055a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d002      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x30>
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d003      	beq.n	80055d6 <HAL_RCC_GetSysClockFreq+0x36>
 80055ce:	e03c      	b.n	800564a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055d2:	623b      	str	r3, [r7, #32]
      break;
 80055d4:	e03c      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80055e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	fa92 f2a2 	rbit	r2, r2
 80055e8:	607a      	str	r2, [r7, #4]
  return result;
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	fab2 f282 	clz	r2, r2
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	40d3      	lsrs	r3, r2
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055f6:	5cd3      	ldrb	r3, [r2, r3]
 80055f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	220f      	movs	r2, #15
 8005604:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	fa92 f2a2 	rbit	r2, r2
 800560c:	60fa      	str	r2, [r7, #12]
  return result;
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	fab2 f282 	clz	r2, r2
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	40d3      	lsrs	r3, r2
 8005618:	4a14      	ldr	r2, [pc, #80]	; (800566c <HAL_RCC_GetSysClockFreq+0xcc>)
 800561a:	5cd3      	ldrb	r3, [r2, r3]
 800561c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005628:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <HAL_RCC_GetSysClockFreq+0xc4>)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
 8005638:	e004      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <HAL_RCC_GetSysClockFreq+0xd0>)
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	623b      	str	r3, [r7, #32]
      break;
 8005648:	e002      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCC_GetSysClockFreq+0xc4>)
 800564c:	623b      	str	r3, [r7, #32]
      break;
 800564e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005650:	6a3b      	ldr	r3, [r7, #32]
}
 8005652:	4618      	mov	r0, r3
 8005654:	372c      	adds	r7, #44	; 0x2c
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000
 8005664:	007a1200 	.word	0x007a1200
 8005668:	080095d0 	.word	0x080095d0
 800566c:	080095e0 	.word	0x080095e0
 8005670:	003d0900 	.word	0x003d0900

08005674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <HAL_RCC_GetHCLKFreq+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000010 	.word	0x20000010

0800568c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005692:	f7ff ffef 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 8005696:	4601      	mov	r1, r0
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80056a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	fa92 f2a2 	rbit	r2, r2
 80056ac:	603a      	str	r2, [r7, #0]
  return result;
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	fab2 f282 	clz	r2, r2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	40d3      	lsrs	r3, r2
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	080095c8 	.word	0x080095c8

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80056d6:	f7ff ffcd 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 80056da:	4601      	mov	r1, r0
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80056e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	fa92 f2a2 	rbit	r2, r2
 80056f0:	603a      	str	r2, [r7, #0]
  return result;
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	fab2 f282 	clz	r2, r2
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	40d3      	lsrs	r3, r2
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <HAL_RCC_GetPCLK2Freq+0x40>)
 80056fe:	5cd3      	ldrb	r3, [r2, r3]
 8005700:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	080095c8 	.word	0x080095c8

08005714 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b092      	sub	sp, #72	; 0x48
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80d4 	beq.w	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005738:	4b4e      	ldr	r3, [pc, #312]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10e      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005744:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	4a4a      	ldr	r2, [pc, #296]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574e:	61d3      	str	r3, [r2, #28]
 8005750:	4b48      	ldr	r3, [pc, #288]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005762:	4b45      	ldr	r3, [pc, #276]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d118      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576e:	4b42      	ldr	r3, [pc, #264]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577a:	f7fc fd41 	bl	8002200 <HAL_GetTick>
 800577e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	e008      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005782:	f7fc fd3d 	bl	8002200 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b64      	cmp	r3, #100	; 0x64
 800578e:	d901      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e169      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057a0:	4b34      	ldr	r3, [pc, #208]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8084 	beq.w	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057bc:	429a      	cmp	r2, r3
 80057be:	d07c      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057c0:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	461a      	mov	r2, r3
 80057ea:	2301      	movs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d04b      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fc fced 	bl	8002200 <HAL_GetTick>
 8005826:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc fce9 	bl	8002200 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e113      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005840:	2302      	movs	r3, #2
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
 800584c:	2302      	movs	r3, #2
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	61fb      	str	r3, [r7, #28]
  return result;
 8005858:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d108      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800586e:	4b01      	ldr	r3, [pc, #4]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	e00d      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005874:	40021000 	.word	0x40021000
 8005878:	40007000 	.word	0x40007000
 800587c:	10908100 	.word	0x10908100
 8005880:	2302      	movs	r3, #2
 8005882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	4b78      	ldr	r3, [pc, #480]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2202      	movs	r2, #2
 8005892:	613a      	str	r2, [r7, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	fa92 f2a2 	rbit	r2, r2
 800589a:	60fa      	str	r2, [r7, #12]
  return result;
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fab2 f282 	clz	r2, r2
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	f002 021f 	and.w	r2, r2, #31
 80058ae:	2101      	movs	r1, #1
 80058b0:	fa01 f202 	lsl.w	r2, r1, r2
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0b7      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058ba:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	496a      	ldr	r1, [pc, #424]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d4:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	4a65      	ldr	r2, [pc, #404]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ec:	4b60      	ldr	r3, [pc, #384]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	f023 0203 	bic.w	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	495d      	ldr	r1, [pc, #372]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590a:	4b59      	ldr	r3, [pc, #356]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4956      	ldr	r1, [pc, #344]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005928:	4b51      	ldr	r3, [pc, #324]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	494e      	ldr	r1, [pc, #312]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4947      	ldr	r1, [pc, #284]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005954:	4313      	orrs	r3, r2
 8005956:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005964:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	493f      	ldr	r1, [pc, #252]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005982:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f023 0220 	bic.w	r2, r3, #32
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4938      	ldr	r1, [pc, #224]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a0:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	4930      	ldr	r1, [pc, #192]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059be:	4b2c      	ldr	r3, [pc, #176]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	4929      	ldr	r1, [pc, #164]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	4921      	ldr	r1, [pc, #132]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	491a      	ldr	r1, [pc, #104]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	4912      	ldr	r1, [pc, #72]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	490b      	ldr	r1, [pc, #44]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3748      	adds	r7, #72	; 0x48
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e09d      	b.n	8005bc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d009      	beq.n	8005aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
 8005a9e:	e005      	b.n	8005aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc f950 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aec:	d902      	bls.n	8005af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e002      	b.n	8005afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b02:	d007      	beq.n	8005b14 <HAL_SPI_Init+0xa0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	ea42 0103 	orr.w	r1, r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	f003 0204 	and.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b90:	ea42 0103 	orr.w	r1, r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e049      	b.n	8005c70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fc f8fd 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fd27 	bl	800665c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e04a      	b.n	8005d26 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_TIM_Base_Start_IT+0xbc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d013      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1a      	ldr	r2, [pc, #104]	; (8005d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d115      	bne.n	8005d10 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d015      	beq.n	8005d22 <HAL_TIM_Base_Start_IT+0xaa>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d011      	beq.n	8005d22 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	00010007 	.word	0x00010007

08005d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e049      	b.n	8005df2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f841 	bl	8005dfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fc66 	bl	800665c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x24>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e03c      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x3e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e02f      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x58>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e022      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d109      	bne.n	8005e82 <HAL_TIM_PWM_Start+0x72>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	e015      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x8c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e008      	b.n	8005eae <HAL_TIM_PWM_Start+0x9e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e097      	b.n	8005fe6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xb6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	e023      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0xc6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed4:	e01b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee4:	e013      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0xe6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	e00b      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start+0xf6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f04:	e003      	b.n	8005f0e <HAL_TIM_PWM_Start+0xfe>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 ffa0 	bl	8006e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a33      	ldr	r2, [pc, #204]	; (8005ff0 <HAL_TIM_PWM_Start+0x1e0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a32      	ldr	r2, [pc, #200]	; (8005ff4 <HAL_TIM_PWM_Start+0x1e4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a30      	ldr	r2, [pc, #192]	; (8005ff8 <HAL_TIM_PWM_Start+0x1e8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2f      	ldr	r2, [pc, #188]	; (8005ffc <HAL_TIM_PWM_Start+0x1ec>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2d      	ldr	r2, [pc, #180]	; (8006000 <HAL_TIM_PWM_Start+0x1f0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x142>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_PWM_Start+0x144>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <HAL_TIM_PWM_Start+0x1e0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <HAL_TIM_PWM_Start+0x194>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7a:	d013      	beq.n	8005fa4 <HAL_TIM_PWM_Start+0x194>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a20      	ldr	r2, [pc, #128]	; (8006004 <HAL_TIM_PWM_Start+0x1f4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_TIM_PWM_Start+0x194>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_TIM_PWM_Start+0x1f8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_TIM_PWM_Start+0x194>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a17      	ldr	r2, [pc, #92]	; (8005ff4 <HAL_TIM_PWM_Start+0x1e4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_TIM_PWM_Start+0x194>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_TIM_PWM_Start+0x1e8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d115      	bne.n	8005fd0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <HAL_TIM_PWM_Start+0x1fc>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d015      	beq.n	8005fe2 <HAL_TIM_PWM_Start+0x1d2>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbc:	d011      	beq.n	8005fe2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	e008      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	00010007 	.word	0x00010007

08006010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d122      	bne.n	800606c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b02      	cmp	r3, #2
 8006032:	d11b      	bne.n	800606c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0202 	mvn.w	r2, #2
 800603c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fae3 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fad5 	bl	800660a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fae6 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d122      	bne.n	80060c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b04      	cmp	r3, #4
 8006086:	d11b      	bne.n	80060c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0204 	mvn.w	r2, #4
 8006090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fab9 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 faab 	bl	800660a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fabc 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0208 	mvn.w	r2, #8
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2204      	movs	r2, #4
 80060ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa8f 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa81 	bl	800660a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa92 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b10      	cmp	r3, #16
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0210 	mvn.w	r2, #16
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2208      	movs	r2, #8
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa65 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa57 	bl	800660a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa68 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b01      	cmp	r3, #1
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0201 	mvn.w	r2, #1
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fb f8f2 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619e:	2b80      	cmp	r3, #128	; 0x80
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fefe 	bl	8006fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	d10e      	bne.n	80061ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d107      	bne.n	80061ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fef1 	bl	8006fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d10e      	bne.n	800621a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d107      	bne.n	800621a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa16 	bl	8006646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b20      	cmp	r3, #32
 8006226:	d10e      	bne.n	8006246 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b20      	cmp	r3, #32
 8006234:	d107      	bne.n	8006246 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f06f 0220 	mvn.w	r2, #32
 800623e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 feb1 	bl	8006fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800626a:	2302      	movs	r3, #2
 800626c:	e0ff      	b.n	800646e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b14      	cmp	r3, #20
 800627a:	f200 80f0 	bhi.w	800645e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062d9 	.word	0x080062d9
 8006288:	0800645f 	.word	0x0800645f
 800628c:	0800645f 	.word	0x0800645f
 8006290:	0800645f 	.word	0x0800645f
 8006294:	08006319 	.word	0x08006319
 8006298:	0800645f 	.word	0x0800645f
 800629c:	0800645f 	.word	0x0800645f
 80062a0:	0800645f 	.word	0x0800645f
 80062a4:	0800635b 	.word	0x0800635b
 80062a8:	0800645f 	.word	0x0800645f
 80062ac:	0800645f 	.word	0x0800645f
 80062b0:	0800645f 	.word	0x0800645f
 80062b4:	0800639b 	.word	0x0800639b
 80062b8:	0800645f 	.word	0x0800645f
 80062bc:	0800645f 	.word	0x0800645f
 80062c0:	0800645f 	.word	0x0800645f
 80062c4:	080063dd 	.word	0x080063dd
 80062c8:	0800645f 	.word	0x0800645f
 80062cc:	0800645f 	.word	0x0800645f
 80062d0:	0800645f 	.word	0x0800645f
 80062d4:	0800641d 	.word	0x0800641d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fa4c 	bl	800677c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0208 	orr.w	r2, r2, #8
 80062f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0204 	bic.w	r2, r2, #4
 8006302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	619a      	str	r2, [r3, #24]
      break;
 8006316:	e0a5      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fabc 	bl	800689c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6999      	ldr	r1, [r3, #24]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	619a      	str	r2, [r3, #24]
      break;
 8006358:	e084      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fb25 	bl	80069b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0208 	orr.w	r2, r2, #8
 8006374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0204 	bic.w	r2, r2, #4
 8006384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69d9      	ldr	r1, [r3, #28]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
      break;
 8006398:	e064      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fb8d 	bl	8006ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69d9      	ldr	r1, [r3, #28]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	021a      	lsls	r2, r3, #8
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	61da      	str	r2, [r3, #28]
      break;
 80063da:	e043      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fbd6 	bl	8006b94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800641a:	e023      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fc1a 	bl	8006c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800645c:	e002      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
      break;
 8006462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIM_ConfigClockSource+0x1c>
 8006490:	2302      	movs	r3, #2
 8006492:	e0b6      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x18a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d0:	d03e      	beq.n	8006550 <HAL_TIM_ConfigClockSource+0xd8>
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d6:	f200 8087 	bhi.w	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 80064da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064de:	f000 8086 	beq.w	80065ee <HAL_TIM_ConfigClockSource+0x176>
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d87f      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 80064e8:	2b70      	cmp	r3, #112	; 0x70
 80064ea:	d01a      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0xaa>
 80064ec:	2b70      	cmp	r3, #112	; 0x70
 80064ee:	d87b      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 80064f0:	2b60      	cmp	r3, #96	; 0x60
 80064f2:	d050      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x11e>
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	d877      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 80064f8:	2b50      	cmp	r3, #80	; 0x50
 80064fa:	d03c      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0xfe>
 80064fc:	2b50      	cmp	r3, #80	; 0x50
 80064fe:	d873      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d058      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x13e>
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d86f      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 8006508:	2b30      	cmp	r3, #48	; 0x30
 800650a:	d064      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x15e>
 800650c:	2b30      	cmp	r3, #48	; 0x30
 800650e:	d86b      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 8006510:	2b20      	cmp	r3, #32
 8006512:	d060      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006514:	2b20      	cmp	r3, #32
 8006516:	d867      	bhi.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05c      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x15e>
 800651c:	2b10      	cmp	r3, #16
 800651e:	d05a      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006520:	e062      	b.n	80065e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6899      	ldr	r1, [r3, #8]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f000 fc73 	bl	8006e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006544:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	609a      	str	r2, [r3, #8]
      break;
 800654e:	e04f      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6899      	ldr	r1, [r3, #8]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f000 fc5c 	bl	8006e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006572:	609a      	str	r2, [r3, #8]
      break;
 8006574:	e03c      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6859      	ldr	r1, [r3, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	461a      	mov	r2, r3
 8006584:	f000 fbd0 	bl	8006d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2150      	movs	r1, #80	; 0x50
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fc29 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006594:	e02c      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6859      	ldr	r1, [r3, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f000 fbef 	bl	8006d86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2160      	movs	r1, #96	; 0x60
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fc19 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065b4:	e01c      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f000 fbb0 	bl	8006d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fc09 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065d4:	e00c      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f000 fc00 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065e6:	e003      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
      break;
 80065ec:	e000      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80065ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <TIM_Base_SetConfig+0x104>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667a:	d00b      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a39      	ldr	r2, [pc, #228]	; (8006764 <TIM_Base_SetConfig+0x108>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a38      	ldr	r2, [pc, #224]	; (8006768 <TIM_Base_SetConfig+0x10c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_Base_SetConfig+0x38>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a37      	ldr	r2, [pc, #220]	; (800676c <TIM_Base_SetConfig+0x110>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d108      	bne.n	80066a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2d      	ldr	r2, [pc, #180]	; (8006760 <TIM_Base_SetConfig+0x104>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01b      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b4:	d017      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2a      	ldr	r2, [pc, #168]	; (8006764 <TIM_Base_SetConfig+0x108>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a29      	ldr	r2, [pc, #164]	; (8006768 <TIM_Base_SetConfig+0x10c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00f      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a28      	ldr	r2, [pc, #160]	; (800676c <TIM_Base_SetConfig+0x110>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <TIM_Base_SetConfig+0x114>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <TIM_Base_SetConfig+0x118>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_Base_SetConfig+0x8a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a25      	ldr	r2, [pc, #148]	; (8006778 <TIM_Base_SetConfig+0x11c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <TIM_Base_SetConfig+0x104>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00f      	beq.n	8006744 <TIM_Base_SetConfig+0xe8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a11      	ldr	r2, [pc, #68]	; (800676c <TIM_Base_SetConfig+0x110>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00b      	beq.n	8006744 <TIM_Base_SetConfig+0xe8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a10      	ldr	r2, [pc, #64]	; (8006770 <TIM_Base_SetConfig+0x114>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d007      	beq.n	8006744 <TIM_Base_SetConfig+0xe8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <TIM_Base_SetConfig+0x118>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_Base_SetConfig+0xe8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <TIM_Base_SetConfig+0x11c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d103      	bne.n	800674c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	615a      	str	r2, [r3, #20]
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40013400 	.word	0x40013400
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800

0800677c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0201 	bic.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0302 	bic.w	r3, r3, #2
 80067c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2c      	ldr	r2, [pc, #176]	; (8006888 <TIM_OC1_SetConfig+0x10c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2b      	ldr	r2, [pc, #172]	; (800688c <TIM_OC1_SetConfig+0x110>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <TIM_OC1_SetConfig+0x114>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a29      	ldr	r2, [pc, #164]	; (8006894 <TIM_OC1_SetConfig+0x118>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a28      	ldr	r2, [pc, #160]	; (8006898 <TIM_OC1_SetConfig+0x11c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10c      	bne.n	8006816 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0308 	bic.w	r3, r3, #8
 8006802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 0304 	bic.w	r3, r3, #4
 8006814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <TIM_OC1_SetConfig+0x10c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1a      	ldr	r2, [pc, #104]	; (800688c <TIM_OC1_SetConfig+0x110>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a19      	ldr	r2, [pc, #100]	; (8006890 <TIM_OC1_SetConfig+0x114>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a18      	ldr	r2, [pc, #96]	; (8006894 <TIM_OC1_SetConfig+0x118>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <TIM_OC1_SetConfig+0x11c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d111      	bne.n	8006862 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40014000 	.word	0x40014000
 8006894:	40014400 	.word	0x40014400
 8006898:	40014800 	.word	0x40014800

0800689c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0210 	bic.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0320 	bic.w	r3, r3, #32
 80068ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a28      	ldr	r2, [pc, #160]	; (800699c <TIM_OC2_SetConfig+0x100>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC2_SetConfig+0x6c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <TIM_OC2_SetConfig+0x104>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d10d      	bne.n	8006924 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1d      	ldr	r2, [pc, #116]	; (800699c <TIM_OC2_SetConfig+0x100>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00f      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <TIM_OC2_SetConfig+0x104>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <TIM_OC2_SetConfig+0x108>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <TIM_OC2_SetConfig+0x10c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a19      	ldr	r2, [pc, #100]	; (80069ac <TIM_OC2_SetConfig+0x110>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d113      	bne.n	8006974 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006952:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a27      	ldr	r2, [pc, #156]	; (8006aac <TIM_OC3_SetConfig+0xfc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC3_SetConfig+0x6a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <TIM_OC3_SetConfig+0x100>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10d      	bne.n	8006a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a34:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <TIM_OC3_SetConfig+0xfc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <TIM_OC3_SetConfig+0x100>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1a      	ldr	r2, [pc, #104]	; (8006ab4 <TIM_OC3_SetConfig+0x104>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <TIM_OC3_SetConfig+0x108>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a18      	ldr	r2, [pc, #96]	; (8006abc <TIM_OC3_SetConfig+0x10c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d113      	bne.n	8006a86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <TIM_OC4_SetConfig+0xc0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <TIM_OC4_SetConfig+0xc4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00b      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a16      	ldr	r2, [pc, #88]	; (8006b88 <TIM_OC4_SetConfig+0xc8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <TIM_OC4_SetConfig+0xcc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <TIM_OC4_SetConfig+0xd0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800

08006b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <TIM_OC5_SetConfig+0xb4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC5_SetConfig+0xb8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <TIM_OC5_SetConfig+0xbc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <TIM_OC5_SetConfig+0xc0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <TIM_OC5_SetConfig+0xc4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d109      	bne.n	8006c22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800

08006c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	051b      	lsls	r3, r3, #20
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <TIM_OC6_SetConfig+0xb8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <TIM_OC6_SetConfig+0xbc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a16      	ldr	r2, [pc, #88]	; (8006d1c <TIM_OC6_SetConfig+0xc0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <TIM_OC6_SetConfig+0xc4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <TIM_OC6_SetConfig+0xc8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d109      	bne.n	8006cec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	029b      	lsls	r3, r3, #10
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40012c00 	.word	0x40012c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 030a 	bic.w	r3, r3, #10
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0210 	bic.w	r2, r3, #16
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2201      	movs	r2, #1
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	fa01 f303 	lsl.w	r3, r1, r3
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e063      	b.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a2b      	ldr	r2, [pc, #172]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d108      	bne.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1b      	ldr	r2, [pc, #108]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f32:	d013      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10c      	bne.n	8006f76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40014000 	.word	0x40014000

08006fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e040      	b.n	8007078 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa ff7e 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2224      	movs	r2, #36	; 0x24
 8007010:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0201 	bic.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fb76 	bl	8007714 <UART_SetConfig>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e022      	b.n	8007078 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fd3e 	bl	8007abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800704e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800705e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fdc5 	bl	8007c00 <UART_CheckIdleState>
 8007076:	4603      	mov	r3, r0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007094:	2b20      	cmp	r3, #32
 8007096:	d132      	bne.n	80070fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_UART_Receive_IT+0x24>
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e02b      	b.n	8007100 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d018      	beq.n	80070ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	623b      	str	r3, [r7, #32]
 80070dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e6      	bne.n	80070bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	461a      	mov	r2, r3
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fe93 	bl	8007e20 <UART_Start_Receive_IT>
 80070fa:	4603      	mov	r3, r0
 80070fc:	e000      	b.n	8007100 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3728      	adds	r7, #40	; 0x28
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b0ba      	sub	sp, #232	; 0xe8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800712e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007132:	f640 030f 	movw	r3, #2063	; 0x80f
 8007136:	4013      	ands	r3, r2
 8007138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800713c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d115      	bne.n	8007170 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00f      	beq.n	8007170 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 82ab 	beq.w	80076bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
      }
      return;
 800716e:	e2a5      	b.n	80076bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8117 	beq.w	80073a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800718a:	4b85      	ldr	r3, [pc, #532]	; (80073a0 <HAL_UART_IRQHandler+0x298>)
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 810a 	beq.w	80073a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <HAL_UART_IRQHandler+0xbc>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2201      	movs	r2, #1
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ba:	f043 0201 	orr.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <HAL_UART_IRQHandler+0xec>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2202      	movs	r2, #2
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	f043 0204 	orr.w	r2, r3, #4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2204      	movs	r2, #4
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721a:	f043 0202 	orr.w	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d017      	beq.n	8007260 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800723c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007240:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2208      	movs	r2, #8
 800724e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007256:	f043 0208 	orr.w	r2, r3, #8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007268:	2b00      	cmp	r3, #0
 800726a:	d012      	beq.n	8007292 <HAL_UART_IRQHandler+0x18a>
 800726c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007288:	f043 0220 	orr.w	r2, r3, #32
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8211 	beq.w	80076c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d005      	beq.n	80072ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04f      	beq.n	800738a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fe4c 	bl	8007f88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d141      	bne.n	8007382 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800732a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800732e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1d9      	bne.n	80072fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007356:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <HAL_UART_IRQHandler+0x29c>)
 8007358:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fb9c 	bl	8003a9c <HAL_DMA_Abort_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d017      	beq.n	800739a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00f      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9b4 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e00b      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9b0 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e007      	b.n	800739a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9ac 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007398:	e192      	b.n	80076c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739a:	bf00      	nop
    return;
 800739c:	e190      	b.n	80076c0 <HAL_UART_IRQHandler+0x5b8>
 800739e:	bf00      	nop
 80073a0:	04000120 	.word	0x04000120
 80073a4:	08008051 	.word	0x08008051

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	f040 814b 	bne.w	8007648 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8144 	beq.w	8007648 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 813d 	beq.w	8007648 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2210      	movs	r2, #16
 80073d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	f040 80b5 	bne.w	8007550 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8164 	beq.w	80076c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007406:	429a      	cmp	r2, r3
 8007408:	f080 815c 	bcs.w	80076c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b20      	cmp	r3, #32
 800741e:	f000 8086 	beq.w	800752e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800743a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800744c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007450:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007458:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1da      	bne.n	8007422 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800747c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007490:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007494:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e1      	bne.n	800746c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e3      	bne.n	80074a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074fe:	f023 0310 	bic.w	r3, r3, #16
 8007502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007510:	65bb      	str	r3, [r7, #88]	; 0x58
 8007512:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800751e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e4      	bne.n	80074ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc fa7e 	bl	8003a2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	b29b      	uxth	r3, r3
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8d7 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800754e:	e0b9      	b.n	80076c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800755c:	b29b      	uxth	r3, r3
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80ab 	beq.w	80076c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80a6 	beq.w	80076c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
 80075a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e4      	bne.n	800757c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	623b      	str	r3, [r7, #32]
   return(result);
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075d6:	633a      	str	r2, [r7, #48]	; 0x30
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e3      	bne.n	80075b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	617b      	str	r3, [r7, #20]
   return(result);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800763a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f85b 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007646:	e03f      	b.n	80076c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00e      	beq.n	8007672 <HAL_UART_IRQHandler+0x56a>
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fed8 	bl	8008420 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007670:	e02d      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d008      	beq.n	800769c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01c      	beq.n	80076cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
    }
    return;
 800769a:	e017      	b.n	80076cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <HAL_UART_IRQHandler+0x5c6>
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fce1 	bl	800807c <UART_EndTransmit_IT>
    return;
 80076ba:	e008      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076bc:	bf00      	nop
 80076be:	e006      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80076cc:	bf00      	nop
  }

}
 80076ce:	37e8      	adds	r7, #232	; 0xe8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007742:	f023 030c 	bic.w	r3, r3, #12
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	430b      	orrs	r3, r1
 800774e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	430a      	orrs	r2, r1
 8007788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4aa7      	ldr	r2, [pc, #668]	; (8007a2c <UART_SetConfig+0x318>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d120      	bne.n	80077d6 <UART_SetConfig+0xc2>
 8007794:	4ba6      	ldr	r3, [pc, #664]	; (8007a30 <UART_SetConfig+0x31c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b03      	cmp	r3, #3
 800779e:	d817      	bhi.n	80077d0 <UART_SetConfig+0xbc>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x94>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077cb 	.word	0x080077cb
 80077b4:	080077bf 	.word	0x080077bf
 80077b8:	2301      	movs	r3, #1
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e0b5      	b.n	800792a <UART_SetConfig+0x216>
 80077be:	2302      	movs	r3, #2
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e0b2      	b.n	800792a <UART_SetConfig+0x216>
 80077c4:	2304      	movs	r3, #4
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e0af      	b.n	800792a <UART_SetConfig+0x216>
 80077ca:	2308      	movs	r3, #8
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e0ac      	b.n	800792a <UART_SetConfig+0x216>
 80077d0:	2310      	movs	r3, #16
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e0a9      	b.n	800792a <UART_SetConfig+0x216>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a96      	ldr	r2, [pc, #600]	; (8007a34 <UART_SetConfig+0x320>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d124      	bne.n	800782a <UART_SetConfig+0x116>
 80077e0:	4b93      	ldr	r3, [pc, #588]	; (8007a30 <UART_SetConfig+0x31c>)
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ec:	d011      	beq.n	8007812 <UART_SetConfig+0xfe>
 80077ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077f2:	d817      	bhi.n	8007824 <UART_SetConfig+0x110>
 80077f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f8:	d011      	beq.n	800781e <UART_SetConfig+0x10a>
 80077fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fe:	d811      	bhi.n	8007824 <UART_SetConfig+0x110>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <UART_SetConfig+0xf8>
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d006      	beq.n	8007818 <UART_SetConfig+0x104>
 800780a:	e00b      	b.n	8007824 <UART_SetConfig+0x110>
 800780c:	2300      	movs	r3, #0
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e08b      	b.n	800792a <UART_SetConfig+0x216>
 8007812:	2302      	movs	r3, #2
 8007814:	77fb      	strb	r3, [r7, #31]
 8007816:	e088      	b.n	800792a <UART_SetConfig+0x216>
 8007818:	2304      	movs	r3, #4
 800781a:	77fb      	strb	r3, [r7, #31]
 800781c:	e085      	b.n	800792a <UART_SetConfig+0x216>
 800781e:	2308      	movs	r3, #8
 8007820:	77fb      	strb	r3, [r7, #31]
 8007822:	e082      	b.n	800792a <UART_SetConfig+0x216>
 8007824:	2310      	movs	r3, #16
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e07f      	b.n	800792a <UART_SetConfig+0x216>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a82      	ldr	r2, [pc, #520]	; (8007a38 <UART_SetConfig+0x324>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d124      	bne.n	800787e <UART_SetConfig+0x16a>
 8007834:	4b7e      	ldr	r3, [pc, #504]	; (8007a30 <UART_SetConfig+0x31c>)
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800783c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007840:	d011      	beq.n	8007866 <UART_SetConfig+0x152>
 8007842:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007846:	d817      	bhi.n	8007878 <UART_SetConfig+0x164>
 8007848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800784c:	d011      	beq.n	8007872 <UART_SetConfig+0x15e>
 800784e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007852:	d811      	bhi.n	8007878 <UART_SetConfig+0x164>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <UART_SetConfig+0x14c>
 8007858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800785c:	d006      	beq.n	800786c <UART_SetConfig+0x158>
 800785e:	e00b      	b.n	8007878 <UART_SetConfig+0x164>
 8007860:	2300      	movs	r3, #0
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e061      	b.n	800792a <UART_SetConfig+0x216>
 8007866:	2302      	movs	r3, #2
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e05e      	b.n	800792a <UART_SetConfig+0x216>
 800786c:	2304      	movs	r3, #4
 800786e:	77fb      	strb	r3, [r7, #31]
 8007870:	e05b      	b.n	800792a <UART_SetConfig+0x216>
 8007872:	2308      	movs	r3, #8
 8007874:	77fb      	strb	r3, [r7, #31]
 8007876:	e058      	b.n	800792a <UART_SetConfig+0x216>
 8007878:	2310      	movs	r3, #16
 800787a:	77fb      	strb	r3, [r7, #31]
 800787c:	e055      	b.n	800792a <UART_SetConfig+0x216>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a6e      	ldr	r2, [pc, #440]	; (8007a3c <UART_SetConfig+0x328>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d124      	bne.n	80078d2 <UART_SetConfig+0x1be>
 8007888:	4b69      	ldr	r3, [pc, #420]	; (8007a30 <UART_SetConfig+0x31c>)
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007894:	d011      	beq.n	80078ba <UART_SetConfig+0x1a6>
 8007896:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800789a:	d817      	bhi.n	80078cc <UART_SetConfig+0x1b8>
 800789c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a0:	d011      	beq.n	80078c6 <UART_SetConfig+0x1b2>
 80078a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a6:	d811      	bhi.n	80078cc <UART_SetConfig+0x1b8>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <UART_SetConfig+0x1a0>
 80078ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b0:	d006      	beq.n	80078c0 <UART_SetConfig+0x1ac>
 80078b2:	e00b      	b.n	80078cc <UART_SetConfig+0x1b8>
 80078b4:	2300      	movs	r3, #0
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e037      	b.n	800792a <UART_SetConfig+0x216>
 80078ba:	2302      	movs	r3, #2
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e034      	b.n	800792a <UART_SetConfig+0x216>
 80078c0:	2304      	movs	r3, #4
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e031      	b.n	800792a <UART_SetConfig+0x216>
 80078c6:	2308      	movs	r3, #8
 80078c8:	77fb      	strb	r3, [r7, #31]
 80078ca:	e02e      	b.n	800792a <UART_SetConfig+0x216>
 80078cc:	2310      	movs	r3, #16
 80078ce:	77fb      	strb	r3, [r7, #31]
 80078d0:	e02b      	b.n	800792a <UART_SetConfig+0x216>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a5a      	ldr	r2, [pc, #360]	; (8007a40 <UART_SetConfig+0x32c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d124      	bne.n	8007926 <UART_SetConfig+0x212>
 80078dc:	4b54      	ldr	r3, [pc, #336]	; (8007a30 <UART_SetConfig+0x31c>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80078e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078e8:	d011      	beq.n	800790e <UART_SetConfig+0x1fa>
 80078ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078ee:	d817      	bhi.n	8007920 <UART_SetConfig+0x20c>
 80078f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078f4:	d011      	beq.n	800791a <UART_SetConfig+0x206>
 80078f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078fa:	d811      	bhi.n	8007920 <UART_SetConfig+0x20c>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <UART_SetConfig+0x1f4>
 8007900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007904:	d006      	beq.n	8007914 <UART_SetConfig+0x200>
 8007906:	e00b      	b.n	8007920 <UART_SetConfig+0x20c>
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e00d      	b.n	800792a <UART_SetConfig+0x216>
 800790e:	2302      	movs	r3, #2
 8007910:	77fb      	strb	r3, [r7, #31]
 8007912:	e00a      	b.n	800792a <UART_SetConfig+0x216>
 8007914:	2304      	movs	r3, #4
 8007916:	77fb      	strb	r3, [r7, #31]
 8007918:	e007      	b.n	800792a <UART_SetConfig+0x216>
 800791a:	2308      	movs	r3, #8
 800791c:	77fb      	strb	r3, [r7, #31]
 800791e:	e004      	b.n	800792a <UART_SetConfig+0x216>
 8007920:	2310      	movs	r3, #16
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e001      	b.n	800792a <UART_SetConfig+0x216>
 8007926:	2310      	movs	r3, #16
 8007928:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007932:	d15b      	bne.n	80079ec <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007934:	7ffb      	ldrb	r3, [r7, #31]
 8007936:	2b08      	cmp	r3, #8
 8007938:	d827      	bhi.n	800798a <UART_SetConfig+0x276>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x22c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	0800798b 	.word	0x0800798b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fd fe92 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e013      	b.n	8007994 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fd feb0 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8007970:	61b8      	str	r0, [r7, #24]
        break;
 8007972:	e00f      	b.n	8007994 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b33      	ldr	r3, [pc, #204]	; (8007a44 <UART_SetConfig+0x330>)
 8007976:	61bb      	str	r3, [r7, #24]
        break;
 8007978:	e00c      	b.n	8007994 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fd fe11 	bl	80055a0 <HAL_RCC_GetSysClockFreq>
 800797e:	61b8      	str	r0, [r7, #24]
        break;
 8007980:	e008      	b.n	8007994 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	61bb      	str	r3, [r7, #24]
        break;
 8007988:	e004      	b.n	8007994 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	77bb      	strb	r3, [r7, #30]
        break;
 8007992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8082 	beq.w	8007aa0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	005a      	lsls	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	441a      	add	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b0f      	cmp	r3, #15
 80079b6:	d916      	bls.n	80079e6 <UART_SetConfig+0x2d2>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079be:	d212      	bcs.n	80079e6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f023 030f 	bic.w	r3, r3, #15
 80079c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	89fb      	ldrh	r3, [r7, #14]
 80079d8:	4313      	orrs	r3, r2
 80079da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	89fa      	ldrh	r2, [r7, #14]
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	e05c      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	77bb      	strb	r3, [r7, #30]
 80079ea:	e059      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079ec:	7ffb      	ldrb	r3, [r7, #31]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d835      	bhi.n	8007a5e <UART_SetConfig+0x34a>
 80079f2:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <UART_SetConfig+0x2e4>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a5f 	.word	0x08007a5f
 8007a08:	08007a4f 	.word	0x08007a4f
 8007a0c:	08007a5f 	.word	0x08007a5f
 8007a10:	08007a5f 	.word	0x08007a5f
 8007a14:	08007a5f 	.word	0x08007a5f
 8007a18:	08007a57 	.word	0x08007a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fd fe36 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8007a20:	61b8      	str	r0, [r7, #24]
        break;
 8007a22:	e021      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fd fe54 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8007a28:	61b8      	str	r0, [r7, #24]
        break;
 8007a2a:	e01d      	b.n	8007a68 <UART_SetConfig+0x354>
 8007a2c:	40013800 	.word	0x40013800
 8007a30:	40021000 	.word	0x40021000
 8007a34:	40004400 	.word	0x40004400
 8007a38:	40004800 	.word	0x40004800
 8007a3c:	40004c00 	.word	0x40004c00
 8007a40:	40005000 	.word	0x40005000
 8007a44:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <UART_SetConfig+0x3a4>)
 8007a4a:	61bb      	str	r3, [r7, #24]
        break;
 8007a4c:	e00c      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fd fda7 	bl	80055a0 <HAL_RCC_GetSysClockFreq>
 8007a52:	61b8      	str	r0, [r7, #24]
        break;
 8007a54:	e008      	b.n	8007a68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5a:	61bb      	str	r3, [r7, #24]
        break;
 8007a5c:	e004      	b.n	8007a68 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	77bb      	strb	r3, [r7, #30]
        break;
 8007a66:	bf00      	nop
    }

    if (pclk != 0U)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d018      	beq.n	8007aa0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	085a      	lsrs	r2, r3, #1
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	441a      	add	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b0f      	cmp	r3, #15
 8007a86:	d909      	bls.n	8007a9c <UART_SetConfig+0x388>
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8e:	d205      	bcs.n	8007a9c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e001      	b.n	8007aa0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007aac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	007a1200 	.word	0x007a1200

08007abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bba:	d10a      	bne.n	8007bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b098      	sub	sp, #96	; 0x60
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c10:	f7fa faf6 	bl	8002200 <HAL_GetTick>
 8007c14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d12e      	bne.n	8007c82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f88c 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d021      	beq.n	8007c82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	653b      	str	r3, [r7, #80]	; 0x50
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e062      	b.n	8007d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d149      	bne.n	8007d24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f856 	bl	8007d50 <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d03c      	beq.n	8007d24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfc:	61fa      	str	r2, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e011      	b.n	8007d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3758      	adds	r7, #88	; 0x58
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d60:	e049      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d045      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fa fa49 	bl	8002200 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e048      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d031      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d110      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f8ed 	bl	8007f88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2208      	movs	r2, #8
 8007db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e029      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd0:	d111      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f8d3 	bl	8007f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e00f      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	bf0c      	ite	eq
 8007e06:	2301      	moveq	r3, #1
 8007e08:	2300      	movne	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d0a6      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b097      	sub	sp, #92	; 0x5c
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e52:	d10e      	bne.n	8007e72 <UART_Start_Receive_IT+0x52>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <UART_Start_Receive_IT+0x48>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e66:	e01a      	b.n	8007e9e <UART_Start_Receive_IT+0x7e>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	22ff      	movs	r2, #255	; 0xff
 8007e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e70:	e015      	b.n	8007e9e <UART_Start_Receive_IT+0x7e>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10d      	bne.n	8007e96 <UART_Start_Receive_IT+0x76>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <UART_Start_Receive_IT+0x6c>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e8a:	e008      	b.n	8007e9e <UART_Start_Receive_IT+0x7e>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	227f      	movs	r2, #127	; 0x7f
 8007e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e94:	e003      	b.n	8007e9e <UART_Start_Receive_IT+0x7e>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2222      	movs	r2, #34	; 0x22
 8007eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ece:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e5      	bne.n	8007eae <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	d107      	bne.n	8007efc <UART_Start_Receive_IT+0xdc>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <UART_Start_Receive_IT+0x160>)
 8007ef8:	669a      	str	r2, [r3, #104]	; 0x68
 8007efa:	e002      	b.n	8007f02 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a21      	ldr	r2, [pc, #132]	; (8007f84 <UART_Start_Receive_IT+0x164>)
 8007f00:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d019      	beq.n	8007f3e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_Start_Receive_IT+0xea>
 8007f3c:	e018      	b.n	8007f70 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f043 0320 	orr.w	r3, r3, #32
 8007f52:	653b      	str	r3, [r7, #80]	; 0x50
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f5c:	623b      	str	r3, [r7, #32]
 8007f5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69f9      	ldr	r1, [r7, #28]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	375c      	adds	r7, #92	; 0x5c
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	08008279 	.word	0x08008279
 8007f84:	080080d1 	.word	0x080080d1

08007f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b095      	sub	sp, #84	; 0x54
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e6      	bne.n	8007f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e5      	bne.n	8007fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d118      	bne.n	8008030 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	60bb      	str	r3, [r7, #8]
   return(result);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f023 0310 	bic.w	r3, r3, #16
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008044:	bf00      	nop
 8008046:	3754      	adds	r7, #84	; 0x54
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fb3a 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	60bb      	str	r3, [r7, #8]
   return(result);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	613b      	str	r3, [r7, #16]
   return(result);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e6      	bne.n	8008084 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff fb06 	bl	80076d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c8:	bf00      	nop
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b09c      	sub	sp, #112	; 0x70
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e8:	2b22      	cmp	r3, #34	; 0x22
 80080ea:	f040 80b9 	bne.w	8008260 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80080fc:	b2d9      	uxtb	r1, r3
 80080fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008102:	b2da      	uxtb	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008108:	400a      	ands	r2, r1
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	f040 809c 	bne.w	8008270 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800814c:	66bb      	str	r3, [r7, #104]	; 0x68
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008156:	65bb      	str	r3, [r7, #88]	; 0x58
 8008158:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800815c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	667b      	str	r3, [r7, #100]	; 0x64
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800818a:	647a      	str	r2, [r7, #68]	; 0x44
 800818c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d018      	beq.n	80081f2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	623b      	str	r3, [r7, #32]
   return(result);
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081d4:	663b      	str	r3, [r7, #96]	; 0x60
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081de:	633b      	str	r3, [r7, #48]	; 0x30
 80081e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e6      	bne.n	80081c0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d12e      	bne.n	8008258 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	60fb      	str	r3, [r7, #12]
   return(result);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f023 0310 	bic.w	r3, r3, #16
 8008214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	69b9      	ldr	r1, [r7, #24]
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	617b      	str	r3, [r7, #20]
   return(result);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e6      	bne.n	8008200 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b10      	cmp	r3, #16
 800823e:	d103      	bne.n	8008248 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2210      	movs	r2, #16
 8008246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fa53 	bl	80076fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008256:	e00b      	b.n	8008270 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7f9 fab3 	bl	80017c4 <HAL_UART_RxCpltCallback>
}
 800825e:	e007      	b.n	8008270 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0208 	orr.w	r2, r2, #8
 800826e:	619a      	str	r2, [r3, #24]
}
 8008270:	bf00      	nop
 8008272:	3770      	adds	r7, #112	; 0x70
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b09c      	sub	sp, #112	; 0x70
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008286:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008290:	2b22      	cmp	r3, #34	; 0x22
 8008292:	f040 80b9 	bne.w	8008408 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800829c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80082a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80082aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082ae:	4013      	ands	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 809c 	bne.w	8008418 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082f4:	667b      	str	r3, [r7, #100]	; 0x64
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008300:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800830c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e6      	bne.n	80082e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	663b      	str	r3, [r7, #96]	; 0x60
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008332:	643a      	str	r2, [r7, #64]	; 0x40
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e5      	bne.n	8008312 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d018      	beq.n	800839a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	61fb      	str	r3, [r7, #28]
   return(result);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800837c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008388:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800838c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e6      	bne.n	8008368 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d12e      	bne.n	8008400 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f023 0310 	bic.w	r3, r3, #16
 80083bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6979      	ldr	r1, [r7, #20]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	613b      	str	r3, [r7, #16]
   return(result);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e6      	bne.n	80083a8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d103      	bne.n	80083f0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2210      	movs	r2, #16
 80083ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff f97f 	bl	80076fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083fe:	e00b      	b.n	8008418 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7f9 f9df 	bl	80017c4 <HAL_UART_RxCpltCallback>
}
 8008406:	e007      	b.n	8008418 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0208 	orr.w	r2, r2, #8
 8008416:	619a      	str	r2, [r3, #24]
}
 8008418:	bf00      	nop
 800841a:	3770      	adds	r7, #112	; 0x70
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800843c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008440:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	b29b      	uxth	r3, r3
 800844e:	43db      	mvns	r3, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	4013      	ands	r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800846a:	b084      	sub	sp, #16
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	f107 0014 	add.w	r0, r7, #20
 8008478:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	b004      	add	sp, #16
 80084aa:	4770      	bx	lr

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4d0d      	ldr	r5, [pc, #52]	; (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1b64      	subs	r4, r4, r5
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2600      	movs	r6, #0
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4d0b      	ldr	r5, [pc, #44]	; (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	; (80084f0 <__libc_init_array+0x44>)
 80084c0:	f001 f86c 	bl	800959c <_init>
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2600      	movs	r6, #0
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	080097c8 	.word	0x080097c8
 80084e8:	080097c8 	.word	0x080097c8
 80084ec:	080097c8 	.word	0x080097c8
 80084f0:	080097cc 	.word	0x080097cc

080084f4 <memset>:
 80084f4:	4402      	add	r2, r0
 80084f6:	4603      	mov	r3, r0
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d100      	bne.n	80084fe <memset+0xa>
 80084fc:	4770      	bx	lr
 80084fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008502:	e7f9      	b.n	80084f8 <memset+0x4>
 8008504:	0000      	movs	r0, r0
	...

08008508 <sin>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	ec53 2b10 	vmov	r2, r3, d0
 800850e:	4828      	ldr	r0, [pc, #160]	; (80085b0 <sin+0xa8>)
 8008510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008514:	4281      	cmp	r1, r0
 8008516:	dc07      	bgt.n	8008528 <sin+0x20>
 8008518:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80085a8 <sin+0xa0>
 800851c:	2000      	movs	r0, #0
 800851e:	b005      	add	sp, #20
 8008520:	f85d eb04 	ldr.w	lr, [sp], #4
 8008524:	f000 be6c 	b.w	8009200 <__kernel_sin>
 8008528:	4822      	ldr	r0, [pc, #136]	; (80085b4 <sin+0xac>)
 800852a:	4281      	cmp	r1, r0
 800852c:	dd09      	ble.n	8008542 <sin+0x3a>
 800852e:	ee10 0a10 	vmov	r0, s0
 8008532:	4619      	mov	r1, r3
 8008534:	f7f7 ff76 	bl	8000424 <__aeabi_dsub>
 8008538:	ec41 0b10 	vmov	d0, r0, r1
 800853c:	b005      	add	sp, #20
 800853e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008542:	4668      	mov	r0, sp
 8008544:	f000 f838 	bl	80085b8 <__ieee754_rem_pio2>
 8008548:	f000 0003 	and.w	r0, r0, #3
 800854c:	2801      	cmp	r0, #1
 800854e:	d00c      	beq.n	800856a <sin+0x62>
 8008550:	2802      	cmp	r0, #2
 8008552:	d011      	beq.n	8008578 <sin+0x70>
 8008554:	b9f0      	cbnz	r0, 8008594 <sin+0x8c>
 8008556:	ed9d 1b02 	vldr	d1, [sp, #8]
 800855a:	ed9d 0b00 	vldr	d0, [sp]
 800855e:	2001      	movs	r0, #1
 8008560:	f000 fe4e 	bl	8009200 <__kernel_sin>
 8008564:	ec51 0b10 	vmov	r0, r1, d0
 8008568:	e7e6      	b.n	8008538 <sin+0x30>
 800856a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800856e:	ed9d 0b00 	vldr	d0, [sp]
 8008572:	f000 fa2d 	bl	80089d0 <__kernel_cos>
 8008576:	e7f5      	b.n	8008564 <sin+0x5c>
 8008578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800857c:	ed9d 0b00 	vldr	d0, [sp]
 8008580:	2001      	movs	r0, #1
 8008582:	f000 fe3d 	bl	8009200 <__kernel_sin>
 8008586:	ec53 2b10 	vmov	r2, r3, d0
 800858a:	ee10 0a10 	vmov	r0, s0
 800858e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008592:	e7d1      	b.n	8008538 <sin+0x30>
 8008594:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008598:	ed9d 0b00 	vldr	d0, [sp]
 800859c:	f000 fa18 	bl	80089d0 <__kernel_cos>
 80085a0:	e7f1      	b.n	8008586 <sin+0x7e>
 80085a2:	bf00      	nop
 80085a4:	f3af 8000 	nop.w
	...
 80085b0:	3fe921fb 	.word	0x3fe921fb
 80085b4:	7fefffff 	.word	0x7fefffff

080085b8 <__ieee754_rem_pio2>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ed2d 8b02 	vpush	{d8}
 80085c0:	ec55 4b10 	vmov	r4, r5, d0
 80085c4:	4bca      	ldr	r3, [pc, #808]	; (80088f0 <__ieee754_rem_pio2+0x338>)
 80085c6:	b08b      	sub	sp, #44	; 0x2c
 80085c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80085cc:	4598      	cmp	r8, r3
 80085ce:	4682      	mov	sl, r0
 80085d0:	9502      	str	r5, [sp, #8]
 80085d2:	dc08      	bgt.n	80085e6 <__ieee754_rem_pio2+0x2e>
 80085d4:	2200      	movs	r2, #0
 80085d6:	2300      	movs	r3, #0
 80085d8:	ed80 0b00 	vstr	d0, [r0]
 80085dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	e028      	b.n	8008638 <__ieee754_rem_pio2+0x80>
 80085e6:	4bc3      	ldr	r3, [pc, #780]	; (80088f4 <__ieee754_rem_pio2+0x33c>)
 80085e8:	4598      	cmp	r8, r3
 80085ea:	dc78      	bgt.n	80086de <__ieee754_rem_pio2+0x126>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	4ec2      	ldr	r6, [pc, #776]	; (80088f8 <__ieee754_rem_pio2+0x340>)
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	ee10 0a10 	vmov	r0, s0
 80085f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80088b8 <__ieee754_rem_pio2+0x300>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	4629      	mov	r1, r5
 80085fe:	dd39      	ble.n	8008674 <__ieee754_rem_pio2+0xbc>
 8008600:	f7f7 ff10 	bl	8000424 <__aeabi_dsub>
 8008604:	45b0      	cmp	r8, r6
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	d01b      	beq.n	8008644 <__ieee754_rem_pio2+0x8c>
 800860c:	a3ac      	add	r3, pc, #688	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x308>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 ff07 	bl	8000424 <__aeabi_dsub>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	e9ca 2300 	strd	r2, r3, [sl]
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f7 feff 	bl	8000424 <__aeabi_dsub>
 8008626:	a3a6      	add	r3, pc, #664	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x308>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f7 fefa 	bl	8000424 <__aeabi_dsub>
 8008630:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008634:	f04f 0b01 	mov.w	fp, #1
 8008638:	4658      	mov	r0, fp
 800863a:	b00b      	add	sp, #44	; 0x2c
 800863c:	ecbd 8b02 	vpop	{d8}
 8008640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008644:	a3a0      	add	r3, pc, #640	; (adr r3, 80088c8 <__ieee754_rem_pio2+0x310>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 feeb 	bl	8000424 <__aeabi_dsub>
 800864e:	a3a0      	add	r3, pc, #640	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x318>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	f7f7 fee4 	bl	8000424 <__aeabi_dsub>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9ca 2300 	strd	r2, r3, [sl]
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 fedc 	bl	8000424 <__aeabi_dsub>
 800866c:	a398      	add	r3, pc, #608	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x318>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	e7db      	b.n	800862c <__ieee754_rem_pio2+0x74>
 8008674:	f7f7 fed8 	bl	8000428 <__adddf3>
 8008678:	45b0      	cmp	r8, r6
 800867a:	4604      	mov	r4, r0
 800867c:	460d      	mov	r5, r1
 800867e:	d016      	beq.n	80086ae <__ieee754_rem_pio2+0xf6>
 8008680:	a38f      	add	r3, pc, #572	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x308>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fecf 	bl	8000428 <__adddf3>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9ca 2300 	strd	r2, r3, [sl]
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 fec5 	bl	8000424 <__aeabi_dsub>
 800869a:	a389      	add	r3, pc, #548	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x308>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fec2 	bl	8000428 <__adddf3>
 80086a4:	f04f 3bff 	mov.w	fp, #4294967295
 80086a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086ac:	e7c4      	b.n	8008638 <__ieee754_rem_pio2+0x80>
 80086ae:	a386      	add	r3, pc, #536	; (adr r3, 80088c8 <__ieee754_rem_pio2+0x310>)
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	f7f7 feb8 	bl	8000428 <__adddf3>
 80086b8:	a385      	add	r3, pc, #532	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x318>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	4604      	mov	r4, r0
 80086c0:	460d      	mov	r5, r1
 80086c2:	f7f7 feb1 	bl	8000428 <__adddf3>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9ca 2300 	strd	r2, r3, [sl]
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fea7 	bl	8000424 <__aeabi_dsub>
 80086d6:	a37e      	add	r3, pc, #504	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x318>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	e7e0      	b.n	80086a0 <__ieee754_rem_pio2+0xe8>
 80086de:	4b87      	ldr	r3, [pc, #540]	; (80088fc <__ieee754_rem_pio2+0x344>)
 80086e0:	4598      	cmp	r8, r3
 80086e2:	f300 80d9 	bgt.w	8008898 <__ieee754_rem_pio2+0x2e0>
 80086e6:	f000 fe49 	bl	800937c <fabs>
 80086ea:	ec55 4b10 	vmov	r4, r5, d0
 80086ee:	ee10 0a10 	vmov	r0, s0
 80086f2:	a379      	add	r3, pc, #484	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x320>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	4629      	mov	r1, r5
 80086fa:	f7f7 fd65 	bl	80001c8 <__aeabi_dmul>
 80086fe:	4b80      	ldr	r3, [pc, #512]	; (8008900 <__ieee754_rem_pio2+0x348>)
 8008700:	2200      	movs	r2, #0
 8008702:	f7f7 fe91 	bl	8000428 <__adddf3>
 8008706:	f7f8 f8cd 	bl	80008a4 <__aeabi_d2iz>
 800870a:	4683      	mov	fp, r0
 800870c:	f7f7 ffd8 	bl	80006c0 <__aeabi_i2d>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	ec43 2b18 	vmov	d8, r2, r3
 8008718:	a367      	add	r3, pc, #412	; (adr r3, 80088b8 <__ieee754_rem_pio2+0x300>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fd53 	bl	80001c8 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fe7b 	bl	8000424 <__aeabi_dsub>
 800872e:	a364      	add	r3, pc, #400	; (adr r3, 80088c0 <__ieee754_rem_pio2+0x308>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	4606      	mov	r6, r0
 8008736:	460f      	mov	r7, r1
 8008738:	ec51 0b18 	vmov	r0, r1, d8
 800873c:	f7f7 fd44 	bl	80001c8 <__aeabi_dmul>
 8008740:	f1bb 0f1f 	cmp.w	fp, #31
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	dc0d      	bgt.n	8008766 <__ieee754_rem_pio2+0x1ae>
 800874a:	4b6e      	ldr	r3, [pc, #440]	; (8008904 <__ieee754_rem_pio2+0x34c>)
 800874c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	4543      	cmp	r3, r8
 8008756:	d006      	beq.n	8008766 <__ieee754_rem_pio2+0x1ae>
 8008758:	4622      	mov	r2, r4
 800875a:	462b      	mov	r3, r5
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f7 fe60 	bl	8000424 <__aeabi_dsub>
 8008764:	e00f      	b.n	8008786 <__ieee754_rem_pio2+0x1ce>
 8008766:	462b      	mov	r3, r5
 8008768:	4622      	mov	r2, r4
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	f7f7 fe59 	bl	8000424 <__aeabi_dsub>
 8008772:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800877c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008780:	f1b8 0f10 	cmp.w	r8, #16
 8008784:	dc02      	bgt.n	800878c <__ieee754_rem_pio2+0x1d4>
 8008786:	e9ca 0100 	strd	r0, r1, [sl]
 800878a:	e039      	b.n	8008800 <__ieee754_rem_pio2+0x248>
 800878c:	a34e      	add	r3, pc, #312	; (adr r3, 80088c8 <__ieee754_rem_pio2+0x310>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	ec51 0b18 	vmov	r0, r1, d8
 8008796:	f7f7 fd17 	bl	80001c8 <__aeabi_dmul>
 800879a:	4604      	mov	r4, r0
 800879c:	460d      	mov	r5, r1
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f7 fe3d 	bl	8000424 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4680      	mov	r8, r0
 80087b0:	4689      	mov	r9, r1
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f7 fe35 	bl	8000424 <__aeabi_dsub>
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	f7f7 fe31 	bl	8000424 <__aeabi_dsub>
 80087c2:	a343      	add	r3, pc, #268	; (adr r3, 80088d0 <__ieee754_rem_pio2+0x318>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	ec51 0b18 	vmov	r0, r1, d8
 80087d0:	f7f7 fcfa 	bl	80001c8 <__aeabi_dmul>
 80087d4:	4622      	mov	r2, r4
 80087d6:	462b      	mov	r3, r5
 80087d8:	f7f7 fe24 	bl	8000424 <__aeabi_dsub>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	4640      	mov	r0, r8
 80087e6:	4649      	mov	r1, r9
 80087e8:	f7f7 fe1c 	bl	8000424 <__aeabi_dsub>
 80087ec:	9a03      	ldr	r2, [sp, #12]
 80087ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b31      	cmp	r3, #49	; 0x31
 80087f6:	dc24      	bgt.n	8008842 <__ieee754_rem_pio2+0x28a>
 80087f8:	e9ca 0100 	strd	r0, r1, [sl]
 80087fc:	4646      	mov	r6, r8
 80087fe:	464f      	mov	r7, r9
 8008800:	e9da 8900 	ldrd	r8, r9, [sl]
 8008804:	4630      	mov	r0, r6
 8008806:	4642      	mov	r2, r8
 8008808:	464b      	mov	r3, r9
 800880a:	4639      	mov	r1, r7
 800880c:	f7f7 fe0a 	bl	8000424 <__aeabi_dsub>
 8008810:	462b      	mov	r3, r5
 8008812:	4622      	mov	r2, r4
 8008814:	f7f7 fe06 	bl	8000424 <__aeabi_dsub>
 8008818:	9b02      	ldr	r3, [sp, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008820:	f6bf af0a 	bge.w	8008638 <__ieee754_rem_pio2+0x80>
 8008824:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008828:	f8ca 3004 	str.w	r3, [sl, #4]
 800882c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008830:	f8ca 8000 	str.w	r8, [sl]
 8008834:	f8ca 0008 	str.w	r0, [sl, #8]
 8008838:	f8ca 300c 	str.w	r3, [sl, #12]
 800883c:	f1cb 0b00 	rsb	fp, fp, #0
 8008840:	e6fa      	b.n	8008638 <__ieee754_rem_pio2+0x80>
 8008842:	a327      	add	r3, pc, #156	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x328>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	ec51 0b18 	vmov	r0, r1, d8
 800884c:	f7f7 fcbc 	bl	80001c8 <__aeabi_dmul>
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4640      	mov	r0, r8
 800885a:	4649      	mov	r1, r9
 800885c:	f7f7 fde2 	bl	8000424 <__aeabi_dsub>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4606      	mov	r6, r0
 8008866:	460f      	mov	r7, r1
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f7 fdda 	bl	8000424 <__aeabi_dsub>
 8008870:	4622      	mov	r2, r4
 8008872:	462b      	mov	r3, r5
 8008874:	f7f7 fdd6 	bl	8000424 <__aeabi_dsub>
 8008878:	a31b      	add	r3, pc, #108	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x330>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	4604      	mov	r4, r0
 8008880:	460d      	mov	r5, r1
 8008882:	ec51 0b18 	vmov	r0, r1, d8
 8008886:	f7f7 fc9f 	bl	80001c8 <__aeabi_dmul>
 800888a:	4622      	mov	r2, r4
 800888c:	462b      	mov	r3, r5
 800888e:	f7f7 fdc9 	bl	8000424 <__aeabi_dsub>
 8008892:	4604      	mov	r4, r0
 8008894:	460d      	mov	r5, r1
 8008896:	e75f      	b.n	8008758 <__ieee754_rem_pio2+0x1a0>
 8008898:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <__ieee754_rem_pio2+0x350>)
 800889a:	4598      	cmp	r8, r3
 800889c:	dd36      	ble.n	800890c <__ieee754_rem_pio2+0x354>
 800889e:	ee10 2a10 	vmov	r2, s0
 80088a2:	462b      	mov	r3, r5
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f7 fdbc 	bl	8000424 <__aeabi_dsub>
 80088ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088b0:	e9ca 0100 	strd	r0, r1, [sl]
 80088b4:	e694      	b.n	80085e0 <__ieee754_rem_pio2+0x28>
 80088b6:	bf00      	nop
 80088b8:	54400000 	.word	0x54400000
 80088bc:	3ff921fb 	.word	0x3ff921fb
 80088c0:	1a626331 	.word	0x1a626331
 80088c4:	3dd0b461 	.word	0x3dd0b461
 80088c8:	1a600000 	.word	0x1a600000
 80088cc:	3dd0b461 	.word	0x3dd0b461
 80088d0:	2e037073 	.word	0x2e037073
 80088d4:	3ba3198a 	.word	0x3ba3198a
 80088d8:	6dc9c883 	.word	0x6dc9c883
 80088dc:	3fe45f30 	.word	0x3fe45f30
 80088e0:	2e000000 	.word	0x2e000000
 80088e4:	3ba3198a 	.word	0x3ba3198a
 80088e8:	252049c1 	.word	0x252049c1
 80088ec:	397b839a 	.word	0x397b839a
 80088f0:	3fe921fb 	.word	0x3fe921fb
 80088f4:	4002d97b 	.word	0x4002d97b
 80088f8:	3ff921fb 	.word	0x3ff921fb
 80088fc:	413921fb 	.word	0x413921fb
 8008900:	3fe00000 	.word	0x3fe00000
 8008904:	080095f0 	.word	0x080095f0
 8008908:	7fefffff 	.word	0x7fefffff
 800890c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008910:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008914:	ee10 0a10 	vmov	r0, s0
 8008918:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800891c:	ee10 6a10 	vmov	r6, s0
 8008920:	460f      	mov	r7, r1
 8008922:	f7f7 ffbf 	bl	80008a4 <__aeabi_d2iz>
 8008926:	f7f7 fecb 	bl	80006c0 <__aeabi_i2d>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008936:	f7f7 fd75 	bl	8000424 <__aeabi_dsub>
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <__ieee754_rem_pio2+0x410>)
 800893c:	2200      	movs	r2, #0
 800893e:	f7f7 fc43 	bl	80001c8 <__aeabi_dmul>
 8008942:	460f      	mov	r7, r1
 8008944:	4606      	mov	r6, r0
 8008946:	f7f7 ffad 	bl	80008a4 <__aeabi_d2iz>
 800894a:	f7f7 feb9 	bl	80006c0 <__aeabi_i2d>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4630      	mov	r0, r6
 8008954:	4639      	mov	r1, r7
 8008956:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800895a:	f7f7 fd63 	bl	8000424 <__aeabi_dsub>
 800895e:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <__ieee754_rem_pio2+0x410>)
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fc31 	bl	80001c8 <__aeabi_dmul>
 8008966:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800896a:	ad04      	add	r5, sp, #16
 800896c:	f04f 0803 	mov.w	r8, #3
 8008970:	46a9      	mov	r9, r5
 8008972:	2600      	movs	r6, #0
 8008974:	2700      	movs	r7, #0
 8008976:	4632      	mov	r2, r6
 8008978:	463b      	mov	r3, r7
 800897a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800897e:	46c3      	mov	fp, r8
 8008980:	3d08      	subs	r5, #8
 8008982:	f108 38ff 	add.w	r8, r8, #4294967295
 8008986:	f7f7 ff5b 	bl	8000840 <__aeabi_dcmpeq>
 800898a:	2800      	cmp	r0, #0
 800898c:	d1f3      	bne.n	8008976 <__ieee754_rem_pio2+0x3be>
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <__ieee754_rem_pio2+0x414>)
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	2302      	movs	r3, #2
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4622      	mov	r2, r4
 8008998:	465b      	mov	r3, fp
 800899a:	4651      	mov	r1, sl
 800899c:	4648      	mov	r0, r9
 800899e:	f000 f8df 	bl	8008b60 <__kernel_rem_pio2>
 80089a2:	9b02      	ldr	r3, [sp, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	4683      	mov	fp, r0
 80089a8:	f6bf ae46 	bge.w	8008638 <__ieee754_rem_pio2+0x80>
 80089ac:	e9da 2100 	ldrd	r2, r1, [sl]
 80089b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089b4:	e9ca 2300 	strd	r2, r3, [sl]
 80089b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80089bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80089c4:	e73a      	b.n	800883c <__ieee754_rem_pio2+0x284>
 80089c6:	bf00      	nop
 80089c8:	41700000 	.word	0x41700000
 80089cc:	08009670 	.word	0x08009670

080089d0 <__kernel_cos>:
 80089d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	ec57 6b10 	vmov	r6, r7, d0
 80089d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089e0:	ed8d 1b00 	vstr	d1, [sp]
 80089e4:	da07      	bge.n	80089f6 <__kernel_cos+0x26>
 80089e6:	ee10 0a10 	vmov	r0, s0
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 ff5a 	bl	80008a4 <__aeabi_d2iz>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f000 8088 	beq.w	8008b06 <__kernel_cos+0x136>
 80089f6:	4632      	mov	r2, r6
 80089f8:	463b      	mov	r3, r7
 80089fa:	4630      	mov	r0, r6
 80089fc:	4639      	mov	r1, r7
 80089fe:	f7f7 fbe3 	bl	80001c8 <__aeabi_dmul>
 8008a02:	4b51      	ldr	r3, [pc, #324]	; (8008b48 <__kernel_cos+0x178>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f7f7 fbdd 	bl	80001c8 <__aeabi_dmul>
 8008a0e:	a340      	add	r3, pc, #256	; (adr r3, 8008b10 <__kernel_cos+0x140>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7f7 fbd4 	bl	80001c8 <__aeabi_dmul>
 8008a20:	a33d      	add	r3, pc, #244	; (adr r3, 8008b18 <__kernel_cos+0x148>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fcff 	bl	8000428 <__adddf3>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	f7f7 fbcb 	bl	80001c8 <__aeabi_dmul>
 8008a32:	a33b      	add	r3, pc, #236	; (adr r3, 8008b20 <__kernel_cos+0x150>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fcf4 	bl	8000424 <__aeabi_dsub>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f7f7 fbc2 	bl	80001c8 <__aeabi_dmul>
 8008a44:	a338      	add	r3, pc, #224	; (adr r3, 8008b28 <__kernel_cos+0x158>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fced 	bl	8000428 <__adddf3>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	f7f7 fbb9 	bl	80001c8 <__aeabi_dmul>
 8008a56:	a336      	add	r3, pc, #216	; (adr r3, 8008b30 <__kernel_cos+0x160>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fce2 	bl	8000424 <__aeabi_dsub>
 8008a60:	4622      	mov	r2, r4
 8008a62:	462b      	mov	r3, r5
 8008a64:	f7f7 fbb0 	bl	80001c8 <__aeabi_dmul>
 8008a68:	a333      	add	r3, pc, #204	; (adr r3, 8008b38 <__kernel_cos+0x168>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fcdb 	bl	8000428 <__adddf3>
 8008a72:	4622      	mov	r2, r4
 8008a74:	462b      	mov	r3, r5
 8008a76:	f7f7 fba7 	bl	80001c8 <__aeabi_dmul>
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	f7f7 fba3 	bl	80001c8 <__aeabi_dmul>
 8008a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f7 fb9b 	bl	80001c8 <__aeabi_dmul>
 8008a92:	460b      	mov	r3, r1
 8008a94:	4602      	mov	r2, r0
 8008a96:	4629      	mov	r1, r5
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7f7 fcc3 	bl	8000424 <__aeabi_dsub>
 8008a9e:	4b2b      	ldr	r3, [pc, #172]	; (8008b4c <__kernel_cos+0x17c>)
 8008aa0:	4598      	cmp	r8, r3
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	dc10      	bgt.n	8008aca <__kernel_cos+0xfa>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f7 fcb8 	bl	8000424 <__aeabi_dsub>
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4926      	ldr	r1, [pc, #152]	; (8008b50 <__kernel_cos+0x180>)
 8008ab8:	4602      	mov	r2, r0
 8008aba:	2000      	movs	r0, #0
 8008abc:	f7f7 fcb2 	bl	8000424 <__aeabi_dsub>
 8008ac0:	ec41 0b10 	vmov	d0, r0, r1
 8008ac4:	b003      	add	sp, #12
 8008ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aca:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <__kernel_cos+0x184>)
 8008acc:	4920      	ldr	r1, [pc, #128]	; (8008b50 <__kernel_cos+0x180>)
 8008ace:	4598      	cmp	r8, r3
 8008ad0:	bfcc      	ite	gt
 8008ad2:	4d21      	ldrgt	r5, [pc, #132]	; (8008b58 <__kernel_cos+0x188>)
 8008ad4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ad8:	2400      	movs	r4, #0
 8008ada:	4622      	mov	r2, r4
 8008adc:	462b      	mov	r3, r5
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7f7 fca0 	bl	8000424 <__aeabi_dsub>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	462b      	mov	r3, r5
 8008aec:	4650      	mov	r0, sl
 8008aee:	4659      	mov	r1, fp
 8008af0:	f7f7 fc98 	bl	8000424 <__aeabi_dsub>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	f7f7 fc94 	bl	8000424 <__aeabi_dsub>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4640      	mov	r0, r8
 8008b02:	4649      	mov	r1, r9
 8008b04:	e7da      	b.n	8008abc <__kernel_cos+0xec>
 8008b06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b40 <__kernel_cos+0x170>
 8008b0a:	e7db      	b.n	8008ac4 <__kernel_cos+0xf4>
 8008b0c:	f3af 8000 	nop.w
 8008b10:	be8838d4 	.word	0xbe8838d4
 8008b14:	bda8fae9 	.word	0xbda8fae9
 8008b18:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b1c:	3e21ee9e 	.word	0x3e21ee9e
 8008b20:	809c52ad 	.word	0x809c52ad
 8008b24:	3e927e4f 	.word	0x3e927e4f
 8008b28:	19cb1590 	.word	0x19cb1590
 8008b2c:	3efa01a0 	.word	0x3efa01a0
 8008b30:	16c15177 	.word	0x16c15177
 8008b34:	3f56c16c 	.word	0x3f56c16c
 8008b38:	5555554c 	.word	0x5555554c
 8008b3c:	3fa55555 	.word	0x3fa55555
 8008b40:	00000000 	.word	0x00000000
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	3fe00000 	.word	0x3fe00000
 8008b4c:	3fd33332 	.word	0x3fd33332
 8008b50:	3ff00000 	.word	0x3ff00000
 8008b54:	3fe90000 	.word	0x3fe90000
 8008b58:	3fd20000 	.word	0x3fd20000
 8008b5c:	00000000 	.word	0x00000000

08008b60 <__kernel_rem_pio2>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b02 	vpush	{d8}
 8008b68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008b6c:	f112 0f14 	cmn.w	r2, #20
 8008b70:	9308      	str	r3, [sp, #32]
 8008b72:	9101      	str	r1, [sp, #4]
 8008b74:	4bc4      	ldr	r3, [pc, #784]	; (8008e88 <__kernel_rem_pio2+0x328>)
 8008b76:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008b78:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b7e:	9302      	str	r3, [sp, #8]
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b86:	bfa8      	it	ge
 8008b88:	1ed4      	subge	r4, r2, #3
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	bfb2      	itee	lt
 8008b8e:	2400      	movlt	r4, #0
 8008b90:	2318      	movge	r3, #24
 8008b92:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b96:	f06f 0317 	mvn.w	r3, #23
 8008b9a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b9e:	eb03 0a02 	add.w	sl, r3, r2
 8008ba2:	9b02      	ldr	r3, [sp, #8]
 8008ba4:	9a06      	ldr	r2, [sp, #24]
 8008ba6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008e78 <__kernel_rem_pio2+0x318>
 8008baa:	eb03 0802 	add.w	r8, r3, r2
 8008bae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008bb0:	1aa7      	subs	r7, r4, r2
 8008bb2:	ae22      	add	r6, sp, #136	; 0x88
 8008bb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008bb8:	2500      	movs	r5, #0
 8008bba:	4545      	cmp	r5, r8
 8008bbc:	dd13      	ble.n	8008be6 <__kernel_rem_pio2+0x86>
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008e78 <__kernel_rem_pio2+0x318>
 8008bc4:	aa22      	add	r2, sp, #136	; 0x88
 8008bc6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008bca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	4598      	cmp	r8, r3
 8008bd6:	dc2f      	bgt.n	8008c38 <__kernel_rem_pio2+0xd8>
 8008bd8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008bdc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008be0:	462f      	mov	r7, r5
 8008be2:	2600      	movs	r6, #0
 8008be4:	e01b      	b.n	8008c1e <__kernel_rem_pio2+0xbe>
 8008be6:	42ef      	cmn	r7, r5
 8008be8:	d407      	bmi.n	8008bfa <__kernel_rem_pio2+0x9a>
 8008bea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bee:	f7f7 fd67 	bl	80006c0 <__aeabi_i2d>
 8008bf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	e7df      	b.n	8008bba <__kernel_rem_pio2+0x5a>
 8008bfa:	ec51 0b18 	vmov	r0, r1, d8
 8008bfe:	e7f8      	b.n	8008bf2 <__kernel_rem_pio2+0x92>
 8008c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c08:	f7f7 fade 	bl	80001c8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c14:	f7f7 fc08 	bl	8000428 <__adddf3>
 8008c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c1c:	3601      	adds	r6, #1
 8008c1e:	9b06      	ldr	r3, [sp, #24]
 8008c20:	429e      	cmp	r6, r3
 8008c22:	f1a7 0708 	sub.w	r7, r7, #8
 8008c26:	ddeb      	ble.n	8008c00 <__kernel_rem_pio2+0xa0>
 8008c28:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	ecab 7b02 	vstmia	fp!, {d7}
 8008c34:	3508      	adds	r5, #8
 8008c36:	e7cc      	b.n	8008bd2 <__kernel_rem_pio2+0x72>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	aa0e      	add	r2, sp, #56	; 0x38
 8008c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c40:	930d      	str	r3, [sp, #52]	; 0x34
 8008c42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c48:	9c02      	ldr	r4, [sp, #8]
 8008c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c4c:	00e3      	lsls	r3, r4, #3
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c50:	ab9a      	add	r3, sp, #616	; 0x268
 8008c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008c5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008c64:	46c3      	mov	fp, r8
 8008c66:	46a1      	mov	r9, r4
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	f1a5 0508 	sub.w	r5, r5, #8
 8008c70:	dc77      	bgt.n	8008d62 <__kernel_rem_pio2+0x202>
 8008c72:	ec47 6b10 	vmov	d0, r6, r7
 8008c76:	4650      	mov	r0, sl
 8008c78:	f000 fc0a 	bl	8009490 <scalbn>
 8008c7c:	ec57 6b10 	vmov	r6, r7, d0
 8008c80:	2200      	movs	r2, #0
 8008c82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c86:	ee10 0a10 	vmov	r0, s0
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 fa9c 	bl	80001c8 <__aeabi_dmul>
 8008c90:	ec41 0b10 	vmov	d0, r0, r1
 8008c94:	f000 fb7c 	bl	8009390 <floor>
 8008c98:	4b7c      	ldr	r3, [pc, #496]	; (8008e8c <__kernel_rem_pio2+0x32c>)
 8008c9a:	ec51 0b10 	vmov	r0, r1, d0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f7f7 fa92 	bl	80001c8 <__aeabi_dmul>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 fbba 	bl	8000424 <__aeabi_dsub>
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	f7f7 fdf6 	bl	80008a4 <__aeabi_d2iz>
 8008cb8:	9004      	str	r0, [sp, #16]
 8008cba:	f7f7 fd01 	bl	80006c0 <__aeabi_i2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f7 fbad 	bl	8000424 <__aeabi_dsub>
 8008cca:	f1ba 0f00 	cmp.w	sl, #0
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	dd6d      	ble.n	8008db0 <__kernel_rem_pio2+0x250>
 8008cd4:	1e62      	subs	r2, r4, #1
 8008cd6:	ab0e      	add	r3, sp, #56	; 0x38
 8008cd8:	9d04      	ldr	r5, [sp, #16]
 8008cda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cde:	f1ca 0118 	rsb	r1, sl, #24
 8008ce2:	fa40 f301 	asr.w	r3, r0, r1
 8008ce6:	441d      	add	r5, r3
 8008ce8:	408b      	lsls	r3, r1
 8008cea:	1ac0      	subs	r0, r0, r3
 8008cec:	ab0e      	add	r3, sp, #56	; 0x38
 8008cee:	9504      	str	r5, [sp, #16]
 8008cf0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008cf4:	f1ca 0317 	rsb	r3, sl, #23
 8008cf8:	fa40 fb03 	asr.w	fp, r0, r3
 8008cfc:	f1bb 0f00 	cmp.w	fp, #0
 8008d00:	dd65      	ble.n	8008dce <__kernel_rem_pio2+0x26e>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	2200      	movs	r2, #0
 8008d06:	3301      	adds	r3, #1
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	4615      	mov	r5, r2
 8008d0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d10:	4294      	cmp	r4, r2
 8008d12:	f300 809c 	bgt.w	8008e4e <__kernel_rem_pio2+0x2ee>
 8008d16:	f1ba 0f00 	cmp.w	sl, #0
 8008d1a:	dd07      	ble.n	8008d2c <__kernel_rem_pio2+0x1cc>
 8008d1c:	f1ba 0f01 	cmp.w	sl, #1
 8008d20:	f000 80c0 	beq.w	8008ea4 <__kernel_rem_pio2+0x344>
 8008d24:	f1ba 0f02 	cmp.w	sl, #2
 8008d28:	f000 80c6 	beq.w	8008eb8 <__kernel_rem_pio2+0x358>
 8008d2c:	f1bb 0f02 	cmp.w	fp, #2
 8008d30:	d14d      	bne.n	8008dce <__kernel_rem_pio2+0x26e>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	4956      	ldr	r1, [pc, #344]	; (8008e90 <__kernel_rem_pio2+0x330>)
 8008d38:	2000      	movs	r0, #0
 8008d3a:	f7f7 fb73 	bl	8000424 <__aeabi_dsub>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	d043      	beq.n	8008dce <__kernel_rem_pio2+0x26e>
 8008d46:	4650      	mov	r0, sl
 8008d48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008e80 <__kernel_rem_pio2+0x320>
 8008d4c:	f000 fba0 	bl	8009490 <scalbn>
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	ec53 2b10 	vmov	r2, r3, d0
 8008d58:	f7f7 fb64 	bl	8000424 <__aeabi_dsub>
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	460f      	mov	r7, r1
 8008d60:	e035      	b.n	8008dce <__kernel_rem_pio2+0x26e>
 8008d62:	4b4c      	ldr	r3, [pc, #304]	; (8008e94 <__kernel_rem_pio2+0x334>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 fa2d 	bl	80001c8 <__aeabi_dmul>
 8008d6e:	f7f7 fd99 	bl	80008a4 <__aeabi_d2iz>
 8008d72:	f7f7 fca5 	bl	80006c0 <__aeabi_i2d>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	ec43 2b18 	vmov	d8, r2, r3
 8008d7e:	4b46      	ldr	r3, [pc, #280]	; (8008e98 <__kernel_rem_pio2+0x338>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	f7f7 fa21 	bl	80001c8 <__aeabi_dmul>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fb49 	bl	8000424 <__aeabi_dsub>
 8008d92:	f7f7 fd87 	bl	80008a4 <__aeabi_d2iz>
 8008d96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d9a:	f84b 0b04 	str.w	r0, [fp], #4
 8008d9e:	ec51 0b18 	vmov	r0, r1, d8
 8008da2:	f7f7 fb41 	bl	8000428 <__adddf3>
 8008da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	e75b      	b.n	8008c68 <__kernel_rem_pio2+0x108>
 8008db0:	d106      	bne.n	8008dc0 <__kernel_rem_pio2+0x260>
 8008db2:	1e63      	subs	r3, r4, #1
 8008db4:	aa0e      	add	r2, sp, #56	; 0x38
 8008db6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008dba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008dbe:	e79d      	b.n	8008cfc <__kernel_rem_pio2+0x19c>
 8008dc0:	4b36      	ldr	r3, [pc, #216]	; (8008e9c <__kernel_rem_pio2+0x33c>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f7f7 fd5a 	bl	800087c <__aeabi_dcmpge>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d13d      	bne.n	8008e48 <__kernel_rem_pio2+0x2e8>
 8008dcc:	4683      	mov	fp, r0
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fd33 	bl	8000840 <__aeabi_dcmpeq>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f000 80c0 	beq.w	8008f60 <__kernel_rem_pio2+0x400>
 8008de0:	1e65      	subs	r5, r4, #1
 8008de2:	462b      	mov	r3, r5
 8008de4:	2200      	movs	r2, #0
 8008de6:	9902      	ldr	r1, [sp, #8]
 8008de8:	428b      	cmp	r3, r1
 8008dea:	da6c      	bge.n	8008ec6 <__kernel_rem_pio2+0x366>
 8008dec:	2a00      	cmp	r2, #0
 8008dee:	f000 8089 	beq.w	8008f04 <__kernel_rem_pio2+0x3a4>
 8008df2:	ab0e      	add	r3, sp, #56	; 0x38
 8008df4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008df8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80ad 	beq.w	8008f5c <__kernel_rem_pio2+0x3fc>
 8008e02:	4650      	mov	r0, sl
 8008e04:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008e80 <__kernel_rem_pio2+0x320>
 8008e08:	f000 fb42 	bl	8009490 <scalbn>
 8008e0c:	ab9a      	add	r3, sp, #616	; 0x268
 8008e0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e12:	ec57 6b10 	vmov	r6, r7, d0
 8008e16:	00ec      	lsls	r4, r5, #3
 8008e18:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008e1c:	46aa      	mov	sl, r5
 8008e1e:	f1ba 0f00 	cmp.w	sl, #0
 8008e22:	f280 80d6 	bge.w	8008fd2 <__kernel_rem_pio2+0x472>
 8008e26:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008e78 <__kernel_rem_pio2+0x318>
 8008e2a:	462e      	mov	r6, r5
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	f2c0 8104 	blt.w	800903a <__kernel_rem_pio2+0x4da>
 8008e32:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e34:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e38:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008ea0 <__kernel_rem_pio2+0x340>
 8008e3c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e40:	f04f 0800 	mov.w	r8, #0
 8008e44:	1baf      	subs	r7, r5, r6
 8008e46:	e0ea      	b.n	800901e <__kernel_rem_pio2+0x4be>
 8008e48:	f04f 0b02 	mov.w	fp, #2
 8008e4c:	e759      	b.n	8008d02 <__kernel_rem_pio2+0x1a2>
 8008e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e52:	b955      	cbnz	r5, 8008e6a <__kernel_rem_pio2+0x30a>
 8008e54:	b123      	cbz	r3, 8008e60 <__kernel_rem_pio2+0x300>
 8008e56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e5a:	f8c8 3000 	str.w	r3, [r8]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	3201      	adds	r2, #1
 8008e62:	f108 0804 	add.w	r8, r8, #4
 8008e66:	461d      	mov	r5, r3
 8008e68:	e752      	b.n	8008d10 <__kernel_rem_pio2+0x1b0>
 8008e6a:	1acb      	subs	r3, r1, r3
 8008e6c:	f8c8 3000 	str.w	r3, [r8]
 8008e70:	462b      	mov	r3, r5
 8008e72:	e7f5      	b.n	8008e60 <__kernel_rem_pio2+0x300>
 8008e74:	f3af 8000 	nop.w
	...
 8008e84:	3ff00000 	.word	0x3ff00000
 8008e88:	080097b8 	.word	0x080097b8
 8008e8c:	40200000 	.word	0x40200000
 8008e90:	3ff00000 	.word	0x3ff00000
 8008e94:	3e700000 	.word	0x3e700000
 8008e98:	41700000 	.word	0x41700000
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	08009778 	.word	0x08009778
 8008ea4:	1e62      	subs	r2, r4, #1
 8008ea6:	ab0e      	add	r3, sp, #56	; 0x38
 8008ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008eb0:	a90e      	add	r1, sp, #56	; 0x38
 8008eb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008eb6:	e739      	b.n	8008d2c <__kernel_rem_pio2+0x1cc>
 8008eb8:	1e62      	subs	r2, r4, #1
 8008eba:	ab0e      	add	r3, sp, #56	; 0x38
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ec4:	e7f4      	b.n	8008eb0 <__kernel_rem_pio2+0x350>
 8008ec6:	a90e      	add	r1, sp, #56	; 0x38
 8008ec8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	e789      	b.n	8008de6 <__kernel_rem_pio2+0x286>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d0fa      	beq.n	8008ed2 <__kernel_rem_pio2+0x372>
 8008edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ede:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008ee2:	446a      	add	r2, sp
 8008ee4:	3a98      	subs	r2, #152	; 0x98
 8008ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ee8:	9a08      	ldr	r2, [sp, #32]
 8008eea:	18e3      	adds	r3, r4, r3
 8008eec:	18a5      	adds	r5, r4, r2
 8008eee:	aa22      	add	r2, sp, #136	; 0x88
 8008ef0:	f104 0801 	add.w	r8, r4, #1
 8008ef4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	9b04      	ldr	r3, [sp, #16]
 8008efc:	4543      	cmp	r3, r8
 8008efe:	da04      	bge.n	8008f0a <__kernel_rem_pio2+0x3aa>
 8008f00:	461c      	mov	r4, r3
 8008f02:	e6a3      	b.n	8008c4c <__kernel_rem_pio2+0xec>
 8008f04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7e4      	b.n	8008ed4 <__kernel_rem_pio2+0x374>
 8008f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008f10:	f7f7 fbd6 	bl	80006c0 <__aeabi_i2d>
 8008f14:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1a:	46ab      	mov	fp, r5
 8008f1c:	461c      	mov	r4, r3
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	2600      	movs	r6, #0
 8008f24:	2700      	movs	r7, #0
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	4599      	cmp	r9, r3
 8008f2a:	dd06      	ble.n	8008f3a <__kernel_rem_pio2+0x3da>
 8008f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008f32:	f108 0801 	add.w	r8, r8, #1
 8008f36:	930a      	str	r3, [sp, #40]	; 0x28
 8008f38:	e7df      	b.n	8008efa <__kernel_rem_pio2+0x39a>
 8008f3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f42:	f7f7 f941 	bl	80001c8 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fa6b 	bl	8000428 <__adddf3>
 8008f52:	f109 0901 	add.w	r9, r9, #1
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	e7e4      	b.n	8008f26 <__kernel_rem_pio2+0x3c6>
 8008f5c:	3d01      	subs	r5, #1
 8008f5e:	e748      	b.n	8008df2 <__kernel_rem_pio2+0x292>
 8008f60:	ec47 6b10 	vmov	d0, r6, r7
 8008f64:	f1ca 0000 	rsb	r0, sl, #0
 8008f68:	f000 fa92 	bl	8009490 <scalbn>
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	4ba0      	ldr	r3, [pc, #640]	; (80091f4 <__kernel_rem_pio2+0x694>)
 8008f72:	ee10 0a10 	vmov	r0, s0
 8008f76:	2200      	movs	r2, #0
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fc7f 	bl	800087c <__aeabi_dcmpge>
 8008f7e:	b1f8      	cbz	r0, 8008fc0 <__kernel_rem_pio2+0x460>
 8008f80:	4b9d      	ldr	r3, [pc, #628]	; (80091f8 <__kernel_rem_pio2+0x698>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 f91e 	bl	80001c8 <__aeabi_dmul>
 8008f8c:	f7f7 fc8a 	bl	80008a4 <__aeabi_d2iz>
 8008f90:	4680      	mov	r8, r0
 8008f92:	f7f7 fb95 	bl	80006c0 <__aeabi_i2d>
 8008f96:	4b97      	ldr	r3, [pc, #604]	; (80091f4 <__kernel_rem_pio2+0x694>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 f915 	bl	80001c8 <__aeabi_dmul>
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7f7 fa3d 	bl	8000424 <__aeabi_dsub>
 8008faa:	f7f7 fc7b 	bl	80008a4 <__aeabi_d2iz>
 8008fae:	1c65      	adds	r5, r4, #1
 8008fb0:	ab0e      	add	r3, sp, #56	; 0x38
 8008fb2:	f10a 0a18 	add.w	sl, sl, #24
 8008fb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008fbe:	e720      	b.n	8008e02 <__kernel_rem_pio2+0x2a2>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fc6e 	bl	80008a4 <__aeabi_d2iz>
 8008fc8:	ab0e      	add	r3, sp, #56	; 0x38
 8008fca:	4625      	mov	r5, r4
 8008fcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fd0:	e717      	b.n	8008e02 <__kernel_rem_pio2+0x2a2>
 8008fd2:	ab0e      	add	r3, sp, #56	; 0x38
 8008fd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008fd8:	f7f7 fb72 	bl	80006c0 <__aeabi_i2d>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	f7f7 f8f2 	bl	80001c8 <__aeabi_dmul>
 8008fe4:	4b84      	ldr	r3, [pc, #528]	; (80091f8 <__kernel_rem_pio2+0x698>)
 8008fe6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008fea:	2200      	movs	r2, #0
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 f8ea 	bl	80001c8 <__aeabi_dmul>
 8008ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	e70f      	b.n	8008e1e <__kernel_rem_pio2+0x2be>
 8008ffe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009002:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009006:	f7f7 f8df 	bl	80001c8 <__aeabi_dmul>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009012:	f7f7 fa09 	bl	8000428 <__adddf3>
 8009016:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800901a:	f108 0801 	add.w	r8, r8, #1
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	4598      	cmp	r8, r3
 8009022:	dc01      	bgt.n	8009028 <__kernel_rem_pio2+0x4c8>
 8009024:	45b8      	cmp	r8, r7
 8009026:	ddea      	ble.n	8008ffe <__kernel_rem_pio2+0x49e>
 8009028:	ed9d 7b06 	vldr	d7, [sp, #24]
 800902c:	ab4a      	add	r3, sp, #296	; 0x128
 800902e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009032:	ed87 7b00 	vstr	d7, [r7]
 8009036:	3e01      	subs	r6, #1
 8009038:	e6f8      	b.n	8008e2c <__kernel_rem_pio2+0x2cc>
 800903a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800903c:	2b02      	cmp	r3, #2
 800903e:	dc0b      	bgt.n	8009058 <__kernel_rem_pio2+0x4f8>
 8009040:	2b00      	cmp	r3, #0
 8009042:	dc35      	bgt.n	80090b0 <__kernel_rem_pio2+0x550>
 8009044:	d059      	beq.n	80090fa <__kernel_rem_pio2+0x59a>
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	f003 0007 	and.w	r0, r3, #7
 800904c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009050:	ecbd 8b02 	vpop	{d8}
 8009054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009058:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800905a:	2b03      	cmp	r3, #3
 800905c:	d1f3      	bne.n	8009046 <__kernel_rem_pio2+0x4e6>
 800905e:	ab4a      	add	r3, sp, #296	; 0x128
 8009060:	4423      	add	r3, r4
 8009062:	9306      	str	r3, [sp, #24]
 8009064:	461c      	mov	r4, r3
 8009066:	469a      	mov	sl, r3
 8009068:	9502      	str	r5, [sp, #8]
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009072:	dc6b      	bgt.n	800914c <__kernel_rem_pio2+0x5ec>
 8009074:	46aa      	mov	sl, r5
 8009076:	f1ba 0f01 	cmp.w	sl, #1
 800907a:	f1a4 0408 	sub.w	r4, r4, #8
 800907e:	f300 8085 	bgt.w	800918c <__kernel_rem_pio2+0x62c>
 8009082:	9c06      	ldr	r4, [sp, #24]
 8009084:	2000      	movs	r0, #0
 8009086:	3408      	adds	r4, #8
 8009088:	2100      	movs	r1, #0
 800908a:	2d01      	cmp	r5, #1
 800908c:	f300 809d 	bgt.w	80091ca <__kernel_rem_pio2+0x66a>
 8009090:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009094:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	f040 809b 	bne.w	80091d6 <__kernel_rem_pio2+0x676>
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	e9c3 5600 	strd	r5, r6, [r3]
 80090a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80090aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80090ae:	e7ca      	b.n	8009046 <__kernel_rem_pio2+0x4e6>
 80090b0:	3408      	adds	r4, #8
 80090b2:	ab4a      	add	r3, sp, #296	; 0x128
 80090b4:	441c      	add	r4, r3
 80090b6:	462e      	mov	r6, r5
 80090b8:	2000      	movs	r0, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	2e00      	cmp	r6, #0
 80090be:	da36      	bge.n	800912e <__kernel_rem_pio2+0x5ce>
 80090c0:	f1bb 0f00 	cmp.w	fp, #0
 80090c4:	d039      	beq.n	800913a <__kernel_rem_pio2+0x5da>
 80090c6:	4602      	mov	r2, r0
 80090c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090cc:	9c01      	ldr	r4, [sp, #4]
 80090ce:	e9c4 2300 	strd	r2, r3, [r4]
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80090da:	f7f7 f9a3 	bl	8000424 <__aeabi_dsub>
 80090de:	ae4c      	add	r6, sp, #304	; 0x130
 80090e0:	2401      	movs	r4, #1
 80090e2:	42a5      	cmp	r5, r4
 80090e4:	da2c      	bge.n	8009140 <__kernel_rem_pio2+0x5e0>
 80090e6:	f1bb 0f00 	cmp.w	fp, #0
 80090ea:	d002      	beq.n	80090f2 <__kernel_rem_pio2+0x592>
 80090ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f0:	4619      	mov	r1, r3
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090f8:	e7a5      	b.n	8009046 <__kernel_rem_pio2+0x4e6>
 80090fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80090fe:	eb0d 0403 	add.w	r4, sp, r3
 8009102:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009106:	2000      	movs	r0, #0
 8009108:	2100      	movs	r1, #0
 800910a:	2d00      	cmp	r5, #0
 800910c:	da09      	bge.n	8009122 <__kernel_rem_pio2+0x5c2>
 800910e:	f1bb 0f00 	cmp.w	fp, #0
 8009112:	d002      	beq.n	800911a <__kernel_rem_pio2+0x5ba>
 8009114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009118:	4619      	mov	r1, r3
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	e9c3 0100 	strd	r0, r1, [r3]
 8009120:	e791      	b.n	8009046 <__kernel_rem_pio2+0x4e6>
 8009122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009126:	f7f7 f97f 	bl	8000428 <__adddf3>
 800912a:	3d01      	subs	r5, #1
 800912c:	e7ed      	b.n	800910a <__kernel_rem_pio2+0x5aa>
 800912e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009132:	f7f7 f979 	bl	8000428 <__adddf3>
 8009136:	3e01      	subs	r6, #1
 8009138:	e7c0      	b.n	80090bc <__kernel_rem_pio2+0x55c>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	e7c5      	b.n	80090cc <__kernel_rem_pio2+0x56c>
 8009140:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009144:	f7f7 f970 	bl	8000428 <__adddf3>
 8009148:	3401      	adds	r4, #1
 800914a:	e7ca      	b.n	80090e2 <__kernel_rem_pio2+0x582>
 800914c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009150:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	4640      	mov	r0, r8
 8009160:	4649      	mov	r1, r9
 8009162:	f7f7 f961 	bl	8000428 <__adddf3>
 8009166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 f957 	bl	8000424 <__aeabi_dsub>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	f7f7 f955 	bl	8000428 <__adddf3>
 800917e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009186:	ed8a 7b00 	vstr	d7, [sl]
 800918a:	e76e      	b.n	800906a <__kernel_rem_pio2+0x50a>
 800918c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009190:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009194:	4640      	mov	r0, r8
 8009196:	4632      	mov	r2, r6
 8009198:	463b      	mov	r3, r7
 800919a:	4649      	mov	r1, r9
 800919c:	f7f7 f944 	bl	8000428 <__adddf3>
 80091a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 f93a 	bl	8000424 <__aeabi_dsub>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 f938 	bl	8000428 <__adddf3>
 80091b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091c0:	ed84 7b00 	vstr	d7, [r4]
 80091c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091c8:	e755      	b.n	8009076 <__kernel_rem_pio2+0x516>
 80091ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091ce:	f7f7 f92b 	bl	8000428 <__adddf3>
 80091d2:	3d01      	subs	r5, #1
 80091d4:	e759      	b.n	800908a <__kernel_rem_pio2+0x52a>
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	601d      	str	r5, [r3, #0]
 80091dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091e0:	605c      	str	r4, [r3, #4]
 80091e2:	609f      	str	r7, [r3, #8]
 80091e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091e8:	60d3      	str	r3, [r2, #12]
 80091ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091ee:	6110      	str	r0, [r2, #16]
 80091f0:	6153      	str	r3, [r2, #20]
 80091f2:	e728      	b.n	8009046 <__kernel_rem_pio2+0x4e6>
 80091f4:	41700000 	.word	0x41700000
 80091f8:	3e700000 	.word	0x3e700000
 80091fc:	00000000 	.word	0x00000000

08009200 <__kernel_sin>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b04 	vpush	{d8-d9}
 8009208:	eeb0 8a41 	vmov.f32	s16, s2
 800920c:	eef0 8a61 	vmov.f32	s17, s3
 8009210:	ec55 4b10 	vmov	r4, r5, d0
 8009214:	b083      	sub	sp, #12
 8009216:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800921a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800921e:	9001      	str	r0, [sp, #4]
 8009220:	da06      	bge.n	8009230 <__kernel_sin+0x30>
 8009222:	ee10 0a10 	vmov	r0, s0
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 fb3c 	bl	80008a4 <__aeabi_d2iz>
 800922c:	2800      	cmp	r0, #0
 800922e:	d051      	beq.n	80092d4 <__kernel_sin+0xd4>
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f6 ffc6 	bl	80001c8 <__aeabi_dmul>
 800923c:	4682      	mov	sl, r0
 800923e:	468b      	mov	fp, r1
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f6 ffbe 	bl	80001c8 <__aeabi_dmul>
 800924c:	a341      	add	r3, pc, #260	; (adr r3, 8009354 <__kernel_sin+0x154>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	4680      	mov	r8, r0
 8009254:	4689      	mov	r9, r1
 8009256:	4650      	mov	r0, sl
 8009258:	4659      	mov	r1, fp
 800925a:	f7f6 ffb5 	bl	80001c8 <__aeabi_dmul>
 800925e:	a33f      	add	r3, pc, #252	; (adr r3, 800935c <__kernel_sin+0x15c>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f7 f8de 	bl	8000424 <__aeabi_dsub>
 8009268:	4652      	mov	r2, sl
 800926a:	465b      	mov	r3, fp
 800926c:	f7f6 ffac 	bl	80001c8 <__aeabi_dmul>
 8009270:	a33c      	add	r3, pc, #240	; (adr r3, 8009364 <__kernel_sin+0x164>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f8d7 	bl	8000428 <__adddf3>
 800927a:	4652      	mov	r2, sl
 800927c:	465b      	mov	r3, fp
 800927e:	f7f6 ffa3 	bl	80001c8 <__aeabi_dmul>
 8009282:	a33a      	add	r3, pc, #232	; (adr r3, 800936c <__kernel_sin+0x16c>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f8cc 	bl	8000424 <__aeabi_dsub>
 800928c:	4652      	mov	r2, sl
 800928e:	465b      	mov	r3, fp
 8009290:	f7f6 ff9a 	bl	80001c8 <__aeabi_dmul>
 8009294:	a337      	add	r3, pc, #220	; (adr r3, 8009374 <__kernel_sin+0x174>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f7 f8c5 	bl	8000428 <__adddf3>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	4606      	mov	r6, r0
 80092a2:	460f      	mov	r7, r1
 80092a4:	b9eb      	cbnz	r3, 80092e2 <__kernel_sin+0xe2>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4650      	mov	r0, sl
 80092ac:	4659      	mov	r1, fp
 80092ae:	f7f6 ff8b 	bl	80001c8 <__aeabi_dmul>
 80092b2:	a325      	add	r3, pc, #148	; (adr r3, 8009348 <__kernel_sin+0x148>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f7 f8b4 	bl	8000424 <__aeabi_dsub>
 80092bc:	4642      	mov	r2, r8
 80092be:	464b      	mov	r3, r9
 80092c0:	f7f6 ff82 	bl	80001c8 <__aeabi_dmul>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	f7f7 f8ac 	bl	8000428 <__adddf3>
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	ec45 4b10 	vmov	d0, r4, r5
 80092d8:	b003      	add	sp, #12
 80092da:	ecbd 8b04 	vpop	{d8-d9}
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <__kernel_sin+0x150>)
 80092e4:	ec51 0b18 	vmov	r0, r1, d8
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f6 ff6d 	bl	80001c8 <__aeabi_dmul>
 80092ee:	4632      	mov	r2, r6
 80092f0:	ec41 0b19 	vmov	d9, r0, r1
 80092f4:	463b      	mov	r3, r7
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f6 ff65 	bl	80001c8 <__aeabi_dmul>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	ec51 0b19 	vmov	r0, r1, d9
 8009306:	f7f7 f88d 	bl	8000424 <__aeabi_dsub>
 800930a:	4652      	mov	r2, sl
 800930c:	465b      	mov	r3, fp
 800930e:	f7f6 ff5b 	bl	80001c8 <__aeabi_dmul>
 8009312:	ec53 2b18 	vmov	r2, r3, d8
 8009316:	f7f7 f885 	bl	8000424 <__aeabi_dsub>
 800931a:	a30b      	add	r3, pc, #44	; (adr r3, 8009348 <__kernel_sin+0x148>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4606      	mov	r6, r0
 8009322:	460f      	mov	r7, r1
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f6 ff4e 	bl	80001c8 <__aeabi_dmul>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f7 f878 	bl	8000428 <__adddf3>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7f7 f870 	bl	8000424 <__aeabi_dsub>
 8009344:	e7c4      	b.n	80092d0 <__kernel_sin+0xd0>
 8009346:	bf00      	nop
 8009348:	55555549 	.word	0x55555549
 800934c:	3fc55555 	.word	0x3fc55555
 8009350:	3fe00000 	.word	0x3fe00000
 8009354:	5acfd57c 	.word	0x5acfd57c
 8009358:	3de5d93a 	.word	0x3de5d93a
 800935c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009360:	3e5ae5e6 	.word	0x3e5ae5e6
 8009364:	57b1fe7d 	.word	0x57b1fe7d
 8009368:	3ec71de3 	.word	0x3ec71de3
 800936c:	19c161d5 	.word	0x19c161d5
 8009370:	3f2a01a0 	.word	0x3f2a01a0
 8009374:	1110f8a6 	.word	0x1110f8a6
 8009378:	3f811111 	.word	0x3f811111

0800937c <fabs>:
 800937c:	ec51 0b10 	vmov	r0, r1, d0
 8009380:	ee10 2a10 	vmov	r2, s0
 8009384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009388:	ec43 2b10 	vmov	d0, r2, r3
 800938c:	4770      	bx	lr
	...

08009390 <floor>:
 8009390:	ec51 0b10 	vmov	r0, r1, d0
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800939c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80093a0:	2e13      	cmp	r6, #19
 80093a2:	ee10 5a10 	vmov	r5, s0
 80093a6:	ee10 8a10 	vmov	r8, s0
 80093aa:	460c      	mov	r4, r1
 80093ac:	dc32      	bgt.n	8009414 <floor+0x84>
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	da14      	bge.n	80093dc <floor+0x4c>
 80093b2:	a333      	add	r3, pc, #204	; (adr r3, 8009480 <floor+0xf0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f7 f836 	bl	8000428 <__adddf3>
 80093bc:	2200      	movs	r2, #0
 80093be:	2300      	movs	r3, #0
 80093c0:	f7f7 fa66 	bl	8000890 <__aeabi_dcmpgt>
 80093c4:	b138      	cbz	r0, 80093d6 <floor+0x46>
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	da57      	bge.n	800947a <floor+0xea>
 80093ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80093ce:	431d      	orrs	r5, r3
 80093d0:	d001      	beq.n	80093d6 <floor+0x46>
 80093d2:	4c2d      	ldr	r4, [pc, #180]	; (8009488 <floor+0xf8>)
 80093d4:	2500      	movs	r5, #0
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	e025      	b.n	8009428 <floor+0x98>
 80093dc:	4f2b      	ldr	r7, [pc, #172]	; (800948c <floor+0xfc>)
 80093de:	4137      	asrs	r7, r6
 80093e0:	ea01 0307 	and.w	r3, r1, r7
 80093e4:	4303      	orrs	r3, r0
 80093e6:	d01f      	beq.n	8009428 <floor+0x98>
 80093e8:	a325      	add	r3, pc, #148	; (adr r3, 8009480 <floor+0xf0>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	f7f7 f81b 	bl	8000428 <__adddf3>
 80093f2:	2200      	movs	r2, #0
 80093f4:	2300      	movs	r3, #0
 80093f6:	f7f7 fa4b 	bl	8000890 <__aeabi_dcmpgt>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0eb      	beq.n	80093d6 <floor+0x46>
 80093fe:	2c00      	cmp	r4, #0
 8009400:	bfbe      	ittt	lt
 8009402:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009406:	fa43 f606 	asrlt.w	r6, r3, r6
 800940a:	19a4      	addlt	r4, r4, r6
 800940c:	ea24 0407 	bic.w	r4, r4, r7
 8009410:	2500      	movs	r5, #0
 8009412:	e7e0      	b.n	80093d6 <floor+0x46>
 8009414:	2e33      	cmp	r6, #51	; 0x33
 8009416:	dd0b      	ble.n	8009430 <floor+0xa0>
 8009418:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800941c:	d104      	bne.n	8009428 <floor+0x98>
 800941e:	ee10 2a10 	vmov	r2, s0
 8009422:	460b      	mov	r3, r1
 8009424:	f7f7 f800 	bl	8000428 <__adddf3>
 8009428:	ec41 0b10 	vmov	d0, r0, r1
 800942c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009430:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009434:	f04f 33ff 	mov.w	r3, #4294967295
 8009438:	fa23 f707 	lsr.w	r7, r3, r7
 800943c:	4207      	tst	r7, r0
 800943e:	d0f3      	beq.n	8009428 <floor+0x98>
 8009440:	a30f      	add	r3, pc, #60	; (adr r3, 8009480 <floor+0xf0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f6 ffef 	bl	8000428 <__adddf3>
 800944a:	2200      	movs	r2, #0
 800944c:	2300      	movs	r3, #0
 800944e:	f7f7 fa1f 	bl	8000890 <__aeabi_dcmpgt>
 8009452:	2800      	cmp	r0, #0
 8009454:	d0bf      	beq.n	80093d6 <floor+0x46>
 8009456:	2c00      	cmp	r4, #0
 8009458:	da02      	bge.n	8009460 <floor+0xd0>
 800945a:	2e14      	cmp	r6, #20
 800945c:	d103      	bne.n	8009466 <floor+0xd6>
 800945e:	3401      	adds	r4, #1
 8009460:	ea25 0507 	bic.w	r5, r5, r7
 8009464:	e7b7      	b.n	80093d6 <floor+0x46>
 8009466:	2301      	movs	r3, #1
 8009468:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800946c:	fa03 f606 	lsl.w	r6, r3, r6
 8009470:	4435      	add	r5, r6
 8009472:	4545      	cmp	r5, r8
 8009474:	bf38      	it	cc
 8009476:	18e4      	addcc	r4, r4, r3
 8009478:	e7f2      	b.n	8009460 <floor+0xd0>
 800947a:	2500      	movs	r5, #0
 800947c:	462c      	mov	r4, r5
 800947e:	e7aa      	b.n	80093d6 <floor+0x46>
 8009480:	8800759c 	.word	0x8800759c
 8009484:	7e37e43c 	.word	0x7e37e43c
 8009488:	bff00000 	.word	0xbff00000
 800948c:	000fffff 	.word	0x000fffff

08009490 <scalbn>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	ec55 4b10 	vmov	r4, r5, d0
 8009496:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800949a:	4606      	mov	r6, r0
 800949c:	462b      	mov	r3, r5
 800949e:	b99a      	cbnz	r2, 80094c8 <scalbn+0x38>
 80094a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094a4:	4323      	orrs	r3, r4
 80094a6:	d036      	beq.n	8009516 <scalbn+0x86>
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <scalbn+0x100>)
 80094aa:	4629      	mov	r1, r5
 80094ac:	ee10 0a10 	vmov	r0, s0
 80094b0:	2200      	movs	r2, #0
 80094b2:	f7f6 fe89 	bl	80001c8 <__aeabi_dmul>
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <scalbn+0x104>)
 80094b8:	429e      	cmp	r6, r3
 80094ba:	4604      	mov	r4, r0
 80094bc:	460d      	mov	r5, r1
 80094be:	da10      	bge.n	80094e2 <scalbn+0x52>
 80094c0:	a32b      	add	r3, pc, #172	; (adr r3, 8009570 <scalbn+0xe0>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	e03a      	b.n	800953e <scalbn+0xae>
 80094c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094cc:	428a      	cmp	r2, r1
 80094ce:	d10c      	bne.n	80094ea <scalbn+0x5a>
 80094d0:	ee10 2a10 	vmov	r2, s0
 80094d4:	4620      	mov	r0, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	f7f6 ffa6 	bl	8000428 <__adddf3>
 80094dc:	4604      	mov	r4, r0
 80094de:	460d      	mov	r5, r1
 80094e0:	e019      	b.n	8009516 <scalbn+0x86>
 80094e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094e6:	460b      	mov	r3, r1
 80094e8:	3a36      	subs	r2, #54	; 0x36
 80094ea:	4432      	add	r2, r6
 80094ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094f0:	428a      	cmp	r2, r1
 80094f2:	dd08      	ble.n	8009506 <scalbn+0x76>
 80094f4:	2d00      	cmp	r5, #0
 80094f6:	a120      	add	r1, pc, #128	; (adr r1, 8009578 <scalbn+0xe8>)
 80094f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094fc:	da1c      	bge.n	8009538 <scalbn+0xa8>
 80094fe:	a120      	add	r1, pc, #128	; (adr r1, 8009580 <scalbn+0xf0>)
 8009500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009504:	e018      	b.n	8009538 <scalbn+0xa8>
 8009506:	2a00      	cmp	r2, #0
 8009508:	dd08      	ble.n	800951c <scalbn+0x8c>
 800950a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800950e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009512:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009516:	ec45 4b10 	vmov	d0, r4, r5
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009520:	da19      	bge.n	8009556 <scalbn+0xc6>
 8009522:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009526:	429e      	cmp	r6, r3
 8009528:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800952c:	dd0a      	ble.n	8009544 <scalbn+0xb4>
 800952e:	a112      	add	r1, pc, #72	; (adr r1, 8009578 <scalbn+0xe8>)
 8009530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e2      	bne.n	80094fe <scalbn+0x6e>
 8009538:	a30f      	add	r3, pc, #60	; (adr r3, 8009578 <scalbn+0xe8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 fe43 	bl	80001c8 <__aeabi_dmul>
 8009542:	e7cb      	b.n	80094dc <scalbn+0x4c>
 8009544:	a10a      	add	r1, pc, #40	; (adr r1, 8009570 <scalbn+0xe0>)
 8009546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0b8      	beq.n	80094c0 <scalbn+0x30>
 800954e:	a10e      	add	r1, pc, #56	; (adr r1, 8009588 <scalbn+0xf8>)
 8009550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009554:	e7b4      	b.n	80094c0 <scalbn+0x30>
 8009556:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800955a:	3236      	adds	r2, #54	; 0x36
 800955c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009560:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009564:	4620      	mov	r0, r4
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <scalbn+0x108>)
 8009568:	2200      	movs	r2, #0
 800956a:	e7e8      	b.n	800953e <scalbn+0xae>
 800956c:	f3af 8000 	nop.w
 8009570:	c2f8f359 	.word	0xc2f8f359
 8009574:	01a56e1f 	.word	0x01a56e1f
 8009578:	8800759c 	.word	0x8800759c
 800957c:	7e37e43c 	.word	0x7e37e43c
 8009580:	8800759c 	.word	0x8800759c
 8009584:	fe37e43c 	.word	0xfe37e43c
 8009588:	c2f8f359 	.word	0xc2f8f359
 800958c:	81a56e1f 	.word	0x81a56e1f
 8009590:	43500000 	.word	0x43500000
 8009594:	ffff3cb0 	.word	0xffff3cb0
 8009598:	3c900000 	.word	0x3c900000

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
